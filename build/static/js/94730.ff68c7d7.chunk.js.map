{"version":3,"file":"static/js/94730.ff68c7d7.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/functional/FloatingArrow.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/tooltip/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/tooltip/utils.ts","../node_modules/@esri/calcite-components/dist/components/src/components/tooltip/tooltip.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/tooltip/TooltipManager.ts","../node_modules/@esri/calcite-components/dist/components/src/components/tooltip/tooltip.scss?tag=calcite-tooltip&encapsulation=shadow"],"sourcesContent":["import { FunctionalComponent, h, VNode } from \"@stencil/core\";\nimport { JSXAttributes } from \"@stencil/core/internal\";\nimport { FloatingLayout } from \"../../utils/floating-ui\";\n\ninterface FloatingArrowProps extends JSXAttributes {\n  floatingLayout: FloatingLayout;\n}\n\nconst CSS = {\n  arrow: \"calcite-floating-ui-arrow\",\n  arrowStroke: \"calcite-floating-ui-arrow__stroke\",\n};\n\nconst DEFAULTS = {\n  width: 12,\n  height: 6,\n  strokeWidth: 1,\n};\n\n/**\n * Renders a SVG element to be used as a floating-ui arrow.\n *\n * This functional component should be rendered inside a `FloatingUIComponent` when it needs an arrow element.\n *\n * @param floatingLayout.floatingLayout\n * @param floatingLayout â€“ The effective floating layout to render the arrow vertically or horizontally. Possible values: `vertical` or `horizontal`.\n *\n * See [floating-ui](https://github.com/Esri/calcite-design-system/blob/dev/src/utils/floating-ui.ts)\n * @param floatingLayout.key\n * @param floatingLayout.ref\n */\nexport const FloatingArrow: FunctionalComponent<FloatingArrowProps> = ({\n  floatingLayout,\n  key,\n  ref,\n}): VNode => {\n  const { width, height, strokeWidth } = DEFAULTS;\n  const svgX = width / 2;\n  const isVertical = floatingLayout === \"vertical\";\n\n  const dValue =\n    \"M0,0\" +\n    ` H${width}` +\n    ` L${width - svgX},${height}` +\n    ` Q${svgX},${height} ${svgX},${height}` +\n    \" Z\";\n\n  return (\n    <svg\n      aria-hidden=\"true\"\n      class={CSS.arrow}\n      height={width}\n      key={key}\n      ref={ref}\n      viewBox={`0 0 ${width} ${width + (!isVertical ? strokeWidth : 0)}`}\n      width={width + (isVertical ? strokeWidth : 0)}\n    >\n      {strokeWidth > 0 && (\n        <path\n          class={CSS.arrowStroke}\n          d={dValue}\n          fill=\"none\"\n          // Account for the stroke on the fill path rendered below.\n          stroke-width={strokeWidth + 1}\n        />\n      )}\n      {/* In Firefox, for left/right placements there's a ~0.5px gap where the\n  border can show through. Adding a stroke on the fill removes it. */}\n      <path d={dValue} stroke=\"none\" />\n    </svg>\n  );\n};\n","export const CSS = {\n  container: \"container\",\n};\n\nexport const TOOLTIP_OPEN_DELAY_MS = 300;\nexport const TOOLTIP_CLOSE_DELAY_MS = 500;\n\nexport const ARIA_DESCRIBED_BY = \"aria-describedby\";\n","import { ReferenceElement } from \"../../utils/floating-ui\";\nimport { queryElementRoots } from \"../../utils/dom\";\n\nexport function getEffectiveReferenceElement(tooltip: HTMLCalciteTooltipElement): ReferenceElement {\n  const { referenceElement } = tooltip;\n\n  return (\n    (typeof referenceElement === \"string\" ? queryElementRoots(tooltip, { id: referenceElement }) : referenceElement) ||\n    null\n  );\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { toAriaBoolean } from \"../../utils/dom\";\nimport {\n  connectFloatingUI,\n  defaultOffsetDistance,\n  disconnectFloatingUI,\n  FloatingCSS,\n  FloatingLayout,\n  FloatingUIComponent,\n  LogicalPlacement,\n  OverlayPositioning,\n  ReferenceElement,\n  reposition,\n} from \"../../utils/floating-ui\";\nimport { guid } from \"../../utils/guid\";\nimport { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\nimport { FloatingArrow } from \"../functional/FloatingArrow\";\nimport { ARIA_DESCRIBED_BY, CSS } from \"./resources\";\nimport TooltipManager from \"./TooltipManager\";\nimport { getEffectiveReferenceElement } from \"./utils\";\n\nconst manager = new TooltipManager();\n\n/**\n * @slot - A slot for adding text.\n */\n@Component({\n  tag: \"calcite-tooltip\",\n  styleUrl: \"tooltip.scss\",\n  shadow: true,\n})\nexport class Tooltip implements FloatingUIComponent, OpenCloseComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /** Closes the component when the `referenceElement` is clicked. */\n  @Prop({ reflect: true }) closeOnClick = false;\n\n  /**\n   * Accessible name for the component.\n   *\n   * @deprecated No longer necessary. Overrides the context of the component's description, which could confuse assistive technology users.\n   */\n  @Prop() label: string;\n\n  /**\n   * Offset the position of the component away from the `referenceElement`.\n   *\n   * @default 6\n   */\n  @Prop({ reflect: true }) offsetDistance = defaultOffsetDistance;\n\n  @Watch(\"offsetDistance\")\n  offsetDistanceOffsetHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * Offset the position of the component along the `referenceElement`.\n   */\n  @Prop({ reflect: true }) offsetSkidding = 0;\n\n  @Watch(\"offsetSkidding\")\n  offsetSkiddingHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * When `true`, the component is open.\n   */\n  @Prop({ reflect: true }) open = false;\n\n  @Watch(\"open\")\n  openHandler(): void {\n    onToggleOpenCloseComponent(this);\n    this.reposition(true);\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * The `\"fixed\"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  @Watch(\"overlayPositioning\")\n  overlayPositioningHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * Determines where the component will be positioned relative to the `referenceElement`.\n   */\n  @Prop({ reflect: true }) placement: LogicalPlacement = \"auto\";\n\n  @Watch(\"placement\")\n  placementHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * The `referenceElement` to position the component according to its `\"placement\"` value.\n   *\n   * Setting to the `HTMLElement` is preferred so the component does not need to query the DOM for the `referenceElement`.\n   *\n   * However, a string ID of the reference element can be used.\n   */\n  @Prop() referenceElement: ReferenceElement | string;\n\n  @Watch(\"referenceElement\")\n  referenceElementHandler(): void {\n    this.setUpReferenceElement();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteTooltipElement;\n\n  @State() effectiveReferenceElement: ReferenceElement;\n\n  @State() floatingLayout: FloatingLayout = \"vertical\";\n\n  arrowEl: SVGElement;\n\n  guid = `calcite-tooltip-${guid()}`;\n\n  hasLoaded = false;\n\n  openTransitionProp = \"opacity\";\n\n  transitionEl: HTMLDivElement;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.setUpReferenceElement(true);\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n  }\n\n  async componentWillLoad(): Promise<void> {\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n  }\n\n  componentDidLoad(): void {\n    if (this.referenceElement && !this.effectiveReferenceElement) {\n      this.setUpReferenceElement();\n    }\n    this.hasLoaded = true;\n  }\n\n  disconnectedCallback(): void {\n    this.removeReferences();\n    disconnectFloatingUI(this, this.effectiveReferenceElement, this.el);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when the component is requested to be closed and before the closing transition begins. */\n  @Event({ cancelable: false }) calciteTooltipBeforeClose: EventEmitter<void>;\n\n  /** Fires when the component is closed and animation is complete. */\n  @Event({ cancelable: false }) calciteTooltipClose: EventEmitter<void>;\n\n  /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */\n  @Event({ cancelable: false }) calciteTooltipBeforeOpen: EventEmitter<void>;\n\n  /** Fires when the component is open and animation is complete. */\n  @Event({ cancelable: false }) calciteTooltipOpen: EventEmitter<void>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Updates the position of the component.\n   *\n   * @param delayed\n   */\n  @Method()\n  async reposition(delayed = false): Promise<void> {\n    const {\n      el,\n      effectiveReferenceElement,\n      placement,\n      overlayPositioning,\n      offsetDistance,\n      offsetSkidding,\n      arrowEl,\n    } = this;\n\n    return reposition(\n      this,\n      {\n        floatingEl: el,\n        referenceEl: effectiveReferenceElement,\n        overlayPositioning,\n        placement,\n        offsetDistance,\n        offsetSkidding,\n        arrowEl,\n        type: \"tooltip\",\n      },\n      delayed,\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  onBeforeOpen(): void {\n    this.calciteTooltipBeforeOpen.emit();\n  }\n\n  onOpen(): void {\n    this.calciteTooltipOpen.emit();\n  }\n\n  onBeforeClose(): void {\n    this.calciteTooltipBeforeClose.emit();\n  }\n\n  onClose(): void {\n    this.calciteTooltipClose.emit();\n  }\n\n  private setTransitionEl = (el): void => {\n    this.transitionEl = el;\n  };\n\n  setUpReferenceElement = (warn = true): void => {\n    this.removeReferences();\n    this.effectiveReferenceElement = getEffectiveReferenceElement(this.el);\n    connectFloatingUI(this, this.effectiveReferenceElement, this.el);\n\n    const { el, referenceElement, effectiveReferenceElement } = this;\n    if (warn && referenceElement && !effectiveReferenceElement) {\n      console.warn(`${el.tagName}: reference-element id \"${referenceElement}\" was not found.`, {\n        el,\n      });\n    }\n\n    this.addReferences();\n  };\n\n  getId = (): string => {\n    return this.el.id || this.guid;\n  };\n\n  addReferences = (): void => {\n    const { effectiveReferenceElement } = this;\n\n    if (!effectiveReferenceElement) {\n      return;\n    }\n\n    const id = this.getId();\n\n    if (\"setAttribute\" in effectiveReferenceElement) {\n      effectiveReferenceElement.setAttribute(ARIA_DESCRIBED_BY, id);\n    }\n\n    manager.registerElement(effectiveReferenceElement, this.el);\n  };\n\n  removeReferences = (): void => {\n    const { effectiveReferenceElement } = this;\n\n    if (!effectiveReferenceElement) {\n      return;\n    }\n\n    if (\"removeAttribute\" in effectiveReferenceElement) {\n      effectiveReferenceElement.removeAttribute(ARIA_DESCRIBED_BY);\n    }\n\n    manager.unregisterElement(effectiveReferenceElement);\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    const { effectiveReferenceElement, label, open, floatingLayout } = this;\n    const displayed = effectiveReferenceElement && open;\n    const hidden = !displayed;\n\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(hidden)}\n        aria-label={label}\n        aria-live=\"polite\"\n        calcite-hydrated-hidden={hidden}\n        id={this.getId()}\n        role=\"tooltip\"\n      >\n        <div\n          class={{\n            [FloatingCSS.animation]: true,\n            [FloatingCSS.animationActive]: displayed,\n          }}\n          ref={this.setTransitionEl}\n        >\n          <FloatingArrow\n            floatingLayout={floatingLayout}\n            ref={(arrowEl: SVGElement) => (this.arrowEl = arrowEl)}\n          />\n          <div class={CSS.container}>\n            <slot />\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n","import { getShadowRootNode } from \"../../utils/dom\";\nimport { ReferenceElement } from \"../../utils/floating-ui\";\nimport { TOOLTIP_OPEN_DELAY_MS, TOOLTIP_CLOSE_DELAY_MS } from \"./resources\";\nimport { getEffectiveReferenceElement } from \"./utils\";\n\nexport default class TooltipManager {\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  private registeredElements = new WeakMap<ReferenceElement, HTMLCalciteTooltipElement>();\n\n  private registeredShadowRootCounts = new WeakMap<ShadowRoot, number>();\n\n  private hoverOpenTimeout: number = null;\n\n  private hoverCloseTimeout: number = null;\n\n  private activeTooltip: HTMLCalciteTooltipElement = null;\n\n  private registeredElementCount = 0;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  registerElement(referenceEl: ReferenceElement, tooltip: HTMLCalciteTooltipElement): void {\n    this.registeredElementCount++;\n    this.registeredElements.set(referenceEl, tooltip);\n    const shadowRoot = this.getReferenceElShadowRootNode(referenceEl);\n\n    if (shadowRoot) {\n      this.registerShadowRoot(shadowRoot);\n    }\n\n    if (this.registeredElementCount === 1) {\n      this.addListeners();\n    }\n  }\n\n  unregisterElement(referenceEl: ReferenceElement): void {\n    const shadowRoot = this.getReferenceElShadowRootNode(referenceEl);\n\n    if (shadowRoot) {\n      this.unregisterShadowRoot(shadowRoot);\n    }\n\n    if (this.registeredElements.delete(referenceEl)) {\n      this.registeredElementCount--;\n    }\n\n    if (this.registeredElementCount === 0) {\n      this.removeListeners();\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private queryTooltip = (composedPath: EventTarget[]): HTMLCalciteTooltipElement => {\n    const { registeredElements } = this;\n\n    const registeredElement = (composedPath as HTMLElement[]).find((pathEl) => registeredElements.has(pathEl));\n\n    return registeredElements.get(registeredElement);\n  };\n\n  private keyDownHandler = (event: KeyboardEvent): void => {\n    if (event.key === \"Escape\" && !event.defaultPrevented) {\n      const { activeTooltip } = this;\n\n      if (activeTooltip?.open) {\n        this.clearHoverTimeout();\n        this.closeActiveTooltip();\n\n        const referenceElement = getEffectiveReferenceElement(activeTooltip);\n\n        if (referenceElement instanceof Element && referenceElement.contains(event.target as HTMLElement)) {\n          event.preventDefault();\n        }\n      }\n    }\n  };\n\n  private pointerMoveHandler = (event: PointerEvent): void => {\n    const composedPath = event.composedPath();\n    const { activeTooltip } = this;\n\n    const tooltip = this.queryTooltip(composedPath);\n\n    if (this.pathHasOpenTooltip(tooltip, composedPath)) {\n      this.clearHoverTimeout();\n      return;\n    }\n\n    if (tooltip) {\n      this.openHoveredTooltip(tooltip);\n    } else if (activeTooltip?.open) {\n      this.closeHoveredTooltip();\n    }\n  };\n\n  private pathHasOpenTooltip(tooltip: HTMLCalciteTooltipElement, composedPath: EventTarget[]): boolean {\n    const { activeTooltip } = this;\n\n    return (\n      (activeTooltip?.open && composedPath.includes(activeTooltip)) || (tooltip?.open && composedPath.includes(tooltip))\n    );\n  }\n\n  private clickHandler = (event: Event): void => {\n    const composedPath = event.composedPath();\n    const tooltip = this.queryTooltip(composedPath);\n\n    if (this.pathHasOpenTooltip(tooltip, composedPath)) {\n      this.clearHoverTimeout();\n      return;\n    }\n\n    this.closeActiveTooltip();\n\n    if (!tooltip) {\n      return;\n    }\n\n    this.clearHoverTimeout();\n\n    if (tooltip.closeOnClick) {\n      this.toggleTooltip(tooltip, false);\n      return;\n    }\n\n    this.toggleTooltip(tooltip, true);\n  };\n\n  private blurHandler = (): void => {\n    this.closeActiveTooltip();\n  };\n\n  private focusInHandler = (event: FocusEvent): void => {\n    const composedPath = event.composedPath();\n    const tooltip = this.queryTooltip(composedPath);\n\n    if (this.pathHasOpenTooltip(tooltip, composedPath)) {\n      this.clearHoverTimeout();\n      return;\n    }\n\n    this.closeTooltipIfNotActive(tooltip);\n\n    if (!tooltip) {\n      return;\n    }\n\n    this.toggleFocusedTooltip(tooltip, true);\n  };\n\n  private addShadowListeners(shadowRoot: ShadowRoot): void {\n    shadowRoot.addEventListener(\"focusin\", this.focusInHandler, { capture: true });\n  }\n\n  private removeShadowListeners(shadowRoot: ShadowRoot): void {\n    shadowRoot.removeEventListener(\"focusin\", this.focusInHandler, { capture: true });\n  }\n\n  private addListeners(): void {\n    window.addEventListener(\"keydown\", this.keyDownHandler, { capture: true });\n    window.addEventListener(\"pointermove\", this.pointerMoveHandler, { capture: true });\n    window.addEventListener(\"click\", this.clickHandler, { capture: true });\n    window.addEventListener(\"focusin\", this.focusInHandler, { capture: true });\n    window.addEventListener(\"blur\", this.blurHandler);\n  }\n\n  private removeListeners(): void {\n    window.removeEventListener(\"keydown\", this.keyDownHandler, { capture: true });\n    window.removeEventListener(\"pointermove\", this.pointerMoveHandler, { capture: true });\n    window.removeEventListener(\"click\", this.clickHandler, { capture: true });\n    window.removeEventListener(\"focusin\", this.focusInHandler, { capture: true });\n    window.removeEventListener(\"blur\", this.blurHandler);\n  }\n\n  private clearHoverOpenTimeout(): void {\n    window.clearTimeout(this.hoverOpenTimeout);\n    this.hoverOpenTimeout = null;\n  }\n\n  private clearHoverCloseTimeout(): void {\n    window.clearTimeout(this.hoverCloseTimeout);\n    this.hoverCloseTimeout = null;\n  }\n\n  private clearHoverTimeout(): void {\n    this.clearHoverOpenTimeout();\n    this.clearHoverCloseTimeout();\n  }\n\n  private closeTooltipIfNotActive(tooltip: HTMLCalciteTooltipElement): void {\n    if (this.activeTooltip !== tooltip) {\n      this.closeActiveTooltip();\n    }\n  }\n\n  private closeActiveTooltip(): void {\n    const { activeTooltip } = this;\n\n    if (activeTooltip?.open) {\n      this.toggleTooltip(activeTooltip, false);\n    }\n  }\n\n  private toggleFocusedTooltip(tooltip: HTMLCalciteTooltipElement, open: boolean): void {\n    if (open) {\n      this.clearHoverTimeout();\n    }\n\n    this.toggleTooltip(tooltip, open);\n  }\n\n  private toggleTooltip(tooltip: HTMLCalciteTooltipElement, open: boolean): void {\n    tooltip.open = open;\n\n    this.activeTooltip = open ? tooltip : null;\n  }\n\n  private openHoveredTooltip = (tooltip: HTMLCalciteTooltipElement): void => {\n    this.hoverOpenTimeout = window.setTimeout(\n      () => {\n        if (this.hoverOpenTimeout === null) {\n          return;\n        }\n\n        this.clearHoverCloseTimeout();\n        this.closeTooltipIfNotActive(tooltip);\n        this.toggleTooltip(tooltip, true);\n      },\n      this.activeTooltip?.open ? 0 : TOOLTIP_OPEN_DELAY_MS,\n    );\n  };\n\n  private closeHoveredTooltip = (): void => {\n    this.hoverCloseTimeout = window.setTimeout(() => {\n      if (this.hoverCloseTimeout === null) {\n        return;\n      }\n\n      this.closeActiveTooltip();\n    }, TOOLTIP_CLOSE_DELAY_MS);\n  };\n\n  private registerShadowRoot(shadowRoot: ShadowRoot): void {\n    const { registeredShadowRootCounts } = this;\n\n    const count = registeredShadowRootCounts.get(shadowRoot);\n    const newCount = Math.min((typeof count === \"number\" ? count : 0) + 1, 1);\n\n    if (newCount === 1) {\n      this.addShadowListeners(shadowRoot);\n    }\n\n    registeredShadowRootCounts.set(shadowRoot, newCount);\n  }\n\n  private unregisterShadowRoot(shadowRoot: ShadowRoot): void {\n    const { registeredShadowRootCounts } = this;\n\n    const count = registeredShadowRootCounts.get(shadowRoot);\n    const newCount = Math.max((typeof count === \"number\" ? count : 1) - 1, 0);\n\n    if (newCount === 0) {\n      this.removeShadowListeners(shadowRoot);\n    }\n\n    registeredShadowRootCounts.set(shadowRoot, newCount);\n  }\n\n  private getReferenceElShadowRootNode(referenceEl: ReferenceElement): ShadowRoot | null {\n    return referenceEl instanceof Element ? getShadowRootNode(referenceEl) : null;\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-tooltip-z-index: Sets the z-index value for the component.\n */\n\n:host {\n  --calcite-floating-ui-z-index: var(--calcite-tooltip-z-index, theme(\"zIndex.tooltip\"));\n}\n\n@include floating-ui-host();\n@include floating-ui-arrow();\n\n.container {\n  @apply text-color-1\n    text-n2-wrap\n    relative\n    overflow-hidden\n    rounded\n    py-3\n    px-4\n    font-medium;\n  max-inline-size: 20rem;\n  max-block-size: 20rem;\n  text-align: start;\n}\n\n.calcite-floating-ui-anim {\n  @apply bg-foreground-1\n    border-color-3\n    rounded\n    border\n    border-solid;\n}\n\n.arrow::before {\n  outline: 1px solid var(--calcite-color-border-3);\n}\n\n@include base-component();\n"],"names":["CSS","DEFAULTS","FloatingArrow","floatingLayout","key","ref","width","height","strokeWidth","svgX","isVertical","dValue","h","class","viewBox","d","fill","stroke","ARIA_DESCRIBED_BY","getEffectiveReferenceElement","tooltip","referenceElement","queryElementRoots","id","manager","_classCallCheck","registeredElements","WeakMap","registeredShadowRootCounts","hoverOpenTimeout","hoverCloseTimeout","activeTooltip","registeredElementCount","queryTooltip","composedPath","_this","registeredElement","find","pathEl","has","get","keyDownHandler","event","defaultPrevented","open","clearHoverTimeout","closeActiveTooltip","Element","contains","target","preventDefault","pointerMoveHandler","pathHasOpenTooltip","openHoveredTooltip","closeHoveredTooltip","clickHandler","closeOnClick","toggleTooltip","blurHandler","focusInHandler","closeTooltipIfNotActive","toggleFocusedTooltip","window","setTimeout","clearHoverCloseTimeout","_this$activeTooltip","referenceEl","this","set","shadowRoot","getReferenceElShadowRootNode","registerShadowRoot","addListeners","value","unregisterShadowRoot","delete","removeListeners","includes","addEventListener","capture","removeEventListener","clearTimeout","clearHoverOpenTimeout","count","newCount","Math","min","addShadowListeners","max","removeShadowListeners","getShadowRootNode","Tooltip","_inherits","_this2","guid","el","transitionEl","warn","removeReferences","effectiveReferenceElement","connectFloatingUI","console","tagName","addReferences","getId","setAttribute","registerElement","removeAttribute","unregisterElement","defaultOffsetDistance","reposition","onToggleOpenCloseComponent","setUpReferenceElement","hasLoaded","disconnectFloatingUI","placement","overlayPositioning","offsetDistance","offsetSkidding","arrowEl","_args2","delayed","floatingEl","type","calciteTooltipBeforeOpen","emit","calciteTooltipOpen","calciteTooltipBeforeClose","calciteTooltipClose","_this3","label","displayed","hidden","Host","toAriaBoolean","role","FloatingCSS","setTransitionEl","HTMLElement"],"sourceRoot":""}