{"version":3,"file":"static/js/98375.df86273d.chunk.js","mappings":"wMAIe,SAASA,EAASC,GAC/B,OAAO,OAAeA,KAAQ,OAAgBA,KAAQ,OAA2BA,KAAQ,QAC3F,C,kICNMC,EAAgB,WAClB,cAAcC,EAAAA,EAAAA,GAAAA,KAAAA,GACVC,KAAKC,gBAAkB,IAAIC,IAC3BF,KAAKG,gCAAkC,CACnCC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,aAAc,cAE1B,CAqDK,OArDAC,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAC,IAAAA,OAAAC,IACD,WACI,MAAO,QACf,GAAK,CAAAD,IAAAA,SAAAE,MACD,SAAOC,GACH,OAAO,IAAIC,KAAKD,EACxB,GAAK,CAAAH,IAAAA,WAAAE,MACD,SAASC,GAEL,OAAO,IAAIC,KAAKD,EAAKE,UADF,MAE3B,GAAK,CAAAL,IAAAA,wBAAAE,MACD,SAAsBC,GAClB,IAAMR,EAAOQ,EAAKG,cACZV,EAAQO,EAAKI,WAAa,EAC1BV,EAAMM,EAAKK,UACjB,MAAO,GAAP,OAAUb,EAAI,YAAIC,EAAMa,WAAWC,SAAS,EAAG,KAAI,YAAIb,EAClDY,WACAC,SAAS,EAAG,KACzB,GAAK,CAAAV,IAAAA,gBAAAE,MACD,SAAcS,EAASC,GACnB,IAAMT,EAAOZ,KAAKsB,QAAQF,GAG1B,EAFkBpB,KAAKuB,cAAcF,GACbG,cAAcZ,GAEjCa,QAAO,YAAO,MAAgB,iBAAhB,EAAJC,IAAkC,IAC5CC,KAAI,YAAQ,SAALhB,KAAiB,IAFtBiB,GAEuBC,EAAAA,EAAAA,GAAAA,EAAAA,GAFjB,GAGPC,EAAW9B,KAAK+B,yBAAyBH,GACzCI,EAAkBpB,EAAKqB,cAAgBrB,EAAKsB,oBAAsBJ,GAExE,OADAlB,EAAKuB,WAAWH,GACTpB,CACf,GAAK,CAAAH,IAAAA,OAAAE,MACD,SAAKyB,EAAOC,GACR,OAAOD,EAAMtB,YAAcuB,EAAMvB,SACzC,GAAK,CAAAL,IAAAA,UAAAE,MACD,SAAQS,GACJ,OAAO,IAAIP,KAAKO,EACxB,GAAK,CAAAX,IAAAA,gBAAAE,MACD,SAAcU,GACV,IAAIiB,EAAYtC,KAAKC,gBAAgBS,IAAIW,GAQzC,OAPKiB,IACDA,EAAY,IAAIC,KAAKC,eAAe,SAAS,QACzCC,SAAUpB,GACPrB,KAAKG,kCAEZH,KAAKC,gBAAgByC,IAAIrB,EAAIiB,IAE1BA,CACf,GAAK,CAAA7B,IAAAA,2BAAAE,MACD,SAAyBgC,GACrB,MAAgCA,EAAYC,MAAM,GAAEC,GAAAA,EAAAA,EAAAA,GAAAA,GAA7CC,EAAI,KACX,EAD4B,WACUC,KAAK,IAAIC,MAAM,KAAIC,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAlDC,EAAK,KAAEC,EAAO,KAErB,OADgC,MAATL,EAAe,GAAK,IACF,GAAhBM,OAAOF,GAAcE,OAAOD,GAAW,GACxE,KAAK,EA9DiB,E","sources":["../node_modules/@babel/runtime/helpers/esm/toArray.js","../node_modules/@esri/calcite-components/dist/components/node_modules/timezone-groups/dist/groupByOffset/strategy/native/index.mjs"],"sourcesContent":["import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","class NativeDateEngine {\n    constructor() {\n        this._formatterCache = new Map();\n        this._commonDateTimeFormatterOptions = {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            timeZoneName: 'shortOffset',\n        };\n    }\n    get name() {\n        return 'native';\n    }\n    create(date) {\n        return new Date(date);\n    }\n    increase(date) {\n        const oneDayInMs = 86400000;\n        return new Date(date.getTime() + oneDayInMs);\n    }\n    formatToIsoDateString(date) {\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        return `${year}-${month.toString().padStart(2, '0')}-${day\n            .toString()\n            .padStart(2, '0')}`;\n    }\n    isoToTimeZone(isoDate, tz) {\n        const date = this._toDate(isoDate);\n        const formatter = this._getFormatter(tz);\n        const parts = formatter.formatToParts(date);\n        const [offset] = parts\n            .filter(({ type }) => type === 'timeZoneName')\n            .map(({ value }) => value);\n        const tzOffset = this._getTimeZoneOffsetInMins(offset);\n        const tzOffsetMinutes = date.getMinutes() - (date.getTimezoneOffset() - tzOffset);\n        date.setMinutes(tzOffsetMinutes);\n        return date;\n    }\n    same(date1, date2) {\n        return date1.getTime() === date2.getTime();\n    }\n    _toDate(isoDate) {\n        return new Date(isoDate);\n    }\n    _getFormatter(tz) {\n        let formatter = this._formatterCache.get(tz);\n        if (!formatter) {\n            formatter = new Intl.DateTimeFormat('en-US', {\n                timeZone: tz,\n                ...this._commonDateTimeFormatterOptions,\n            });\n            this._formatterCache.set(tz, formatter);\n        }\n        return formatter;\n    }\n    _getTimeZoneOffsetInMins(gmtTimeZone) {\n        const [sign, ...hoursMinutes] = gmtTimeZone.slice(3);\n        const [hours, minutes] = hoursMinutes.join('').split(':');\n        const signMultiplier = sign === '+' ? 1 : -1;\n        return signMultiplier * (Number(hours) * 60 + Number(minutes || 0));\n    }\n}\n\nexport { NativeDateEngine as DateEngine };\n"],"names":["_toArray","arr","NativeDateEngine","_classCallCheck","this","_formatterCache","Map","_commonDateTimeFormatterOptions","year","month","day","timeZoneName","_createClass","key","get","value","date","Date","getTime","getFullYear","getMonth","getDate","toString","padStart","isoDate","tz","_toDate","_getFormatter","formatToParts","filter","type","map","offset","_parts$filter$map2","tzOffset","_getTimeZoneOffsetInMins","tzOffsetMinutes","getMinutes","getTimezoneOffset","setMinutes","date1","date2","formatter","Intl","DateTimeFormat","timeZone","set","gmtTimeZone","slice","_gmtTimeZone$slice2","sign","join","split","_hoursMinutes$join$sp2","hours","minutes","Number"],"sourceRoot":""}