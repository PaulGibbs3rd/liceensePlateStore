{"version":3,"file":"static/js/42723.f6a91f75.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/node_modules/timezone-groups/dist/utils/continent.mjs","../node_modules/@esri/calcite-components/dist/components/node_modules/timezone-groups/dist/groupByRegion/index.mjs","../node_modules/@esri/calcite-components/dist/components/node_modules/timezone-groups/dist/utils/time-zones.mjs"],"sourcesContent":["const continentAllowList = new Set([\n    'Europe',\n    'Asia',\n    'America',\n    'America/Argentina',\n    'Africa',\n    'Australia',\n    'Pacific',\n    'Atlantic',\n    'Antarctica',\n    'Arctic',\n    'Indian',\n]);\nfunction extractContinent(label, strict = false) {\n    if (label.includes('Istanbul')) {\n        return 'Europe';\n    }\n    const indexFindFunction = strict ? 'indexOf' : 'lastIndexOf';\n    const separatorIndex = label[indexFindFunction]('/');\n    return separatorIndex === -1 ? label : label.slice(0, separatorIndex);\n}\nfunction isRegularContinent(continent) {\n    return continentAllowList.has(continent);\n}\n\nexport { extractContinent, isRegularContinent };\n","import { timeZones } from '../utils/time-zones.mjs';\nimport { extractContinent, isRegularContinent } from '../utils/continent.mjs';\n\nconst generateTimeZoneMetadata = (timeZoneItems) => {\n    return timeZoneItems.map((tzItem) => {\n        const { label } = tzItem;\n        const continent = extractContinent(label, true);\n        return {\n            ...tzItem,\n            continent,\n            isRegularContinent: isRegularContinent(continent),\n        };\n    });\n};\n\nasync function groupByRegion() {\n    const grouping = [];\n    const timeZoneItems = timeZones.map((tz) => ({ label: tz }));\n    const timeZoneMetadata = generateTimeZoneMetadata(timeZoneItems);\n    for (const tzMetadatum of timeZoneMetadata) {\n        const { label, continent, isRegularContinent } = tzMetadatum;\n        if (tzMetadatum.visited) {\n            continue;\n        }\n        tzMetadatum.visited = true;\n        if (!isRegularContinent) {\n            tzMetadatum.visited = true;\n            continue;\n        }\n        const newGroup = {\n            label: continent,\n            tzs: [{ label }],\n        };\n        for (const tzMetadatumJ of timeZoneMetadata.filter((_) => !_.visited)) {\n            const { label: labelJ, continent: continentJ, isRegularContinent: isRegularContinentJ, } = tzMetadatumJ;\n            if (continent === continentJ) {\n                const tzItem = { label: labelJ };\n                newGroup.tzs.push(tzItem);\n                tzMetadatumJ.visited = true;\n            }\n        }\n        grouping.push(newGroup);\n    }\n    return grouping\n        .map((group) => {\n        group.tzs = group.tzs.sort((a, b) => a.label.localeCompare(b.label));\n        return {\n            label: group.label,\n            tzs: group.tzs.map((_) => _.label),\n        };\n    })\n        .sort((a, b) => a.label.localeCompare(b.label));\n}\n\nexport { groupByRegion };\n","const timeZones = (() => {\n    const platformTimeZones = Intl.supportedValuesOf('timeZone');\n    // Not all browsers include these time zones, so we add them to ensure consistent groups\n    const etcTimeZones = [\n        'Etc/GMT+1',\n        'Etc/GMT+10',\n        'Etc/GMT+11',\n        'Etc/GMT+12',\n        'Etc/GMT+2',\n        'Etc/GMT+3',\n        'Etc/GMT+4',\n        'Etc/GMT+5',\n        'Etc/GMT+6',\n        'Etc/GMT+7',\n        'Etc/GMT+8',\n        'Etc/GMT+9',\n        'Etc/GMT-1',\n        'Etc/GMT-10',\n        'Etc/GMT-11',\n        'Etc/GMT-12',\n        'Etc/GMT-13',\n        'Etc/GMT-14',\n        'Etc/GMT-2',\n        'Etc/GMT-3',\n        'Etc/GMT-4',\n        'Etc/GMT-5',\n        'Etc/GMT-6',\n        'Etc/GMT-7',\n        'Etc/GMT-8',\n        'Etc/GMT-9',\n    ];\n    return [...new Set([...platformTimeZones, ...etcTimeZones])];\n})();\n\nexport { timeZones };\n"],"names":["continentAllowList","Set","extractContinent","label","strict","includes","indexFindFunction","separatorIndex","slice","isRegularContinent","continent","has","generateTimeZoneMetadata","timeZoneItems","map","tzItem","groupByRegion","_groupByRegion","grouping","timeZones","tz","timeZoneMetadata","_iterator","_context","tzMetadatum","visited","newGroup","tzs","_iterator2","filter","_","tzMetadatumJ","labelJ","continentJ","push","group","sort","a","b","localeCompare","platformTimeZones","Intl","supportedValuesOf"],"sourceRoot":""}