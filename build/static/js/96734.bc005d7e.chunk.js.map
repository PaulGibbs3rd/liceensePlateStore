{"version":3,"file":"static/js/96734.bc005d7e.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/input-time-zone/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/input-time-zone/utils.ts","../node_modules/@esri/calcite-components/dist/components/src/components/input-time-zone/input-time-zone.scss?tag=calcite-input-time-zone&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/input-time-zone/input-time-zone.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/combobox-item-group/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/combobox-item-group/combobox-item-group.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/combobox-item-group/combobox-item-group.scss?tag=calcite-combobox-item-group&encapsulation=shadow"],"sourcesContent":["export const CSS = {\n  offset: \"offset\",\n};\n","import { getDateTimeFormat, SupportedLocale } from \"../../utils/locale\";\nimport { OffsetStyle, TimeZone, TimeZoneItem, TimeZoneItemGroup, TimeZoneMode } from \"./interfaces\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\n\nconst hourToMinutes = 60;\n\nconst timeZoneNameBlockList = [\n  \"CET\",\n  \"CST6CDT\",\n  \"EET\",\n  \"EST\",\n  \"EST5EDT\",\n  \"Factory\",\n  \"HST\",\n  \"MET\",\n  \"MST\",\n  \"MST7MDT\",\n  \"PST8PDT\",\n  \"UTC\",\n  \"WET\",\n];\n\nfunction timeZoneOffsetToDecimal(shortOffsetTimeZoneName: string): string {\n  const minusSign = \"−\";\n  const hyphen = \"-\";\n\n  return (\n    shortOffsetTimeZoneName\n      .replace(\":15\", \".25\")\n      .replace(\":30\", \".5\")\n      .replace(\":45\", \".75\")\n\n      // ensures decimal string representation is parseable\n      .replace(minusSign, hyphen)\n  );\n}\n\nfunction toOffsetValue(timeZoneName: TimeZone, referenceDateInMs: number): number {\n  // we use \"en-US\" to allow us to reliably remove the standard time token\n  const offset = getTimeZoneShortOffset(timeZoneName, \"en-US\", referenceDateInMs).replace(\"GMT\", \"\");\n\n  if (offset === \"\") {\n    return 0;\n  }\n\n  return Number(timeZoneOffsetToDecimal(offset)) * hourToMinutes;\n}\n\nexport function getUserTimeZoneOffset(): number {\n  const localDate = new Date();\n  return localDate.getTimezoneOffset() * -1;\n}\n\nexport function getUserTimeZoneName(): string {\n  const dateFormatter = new Intl.DateTimeFormat();\n  return dateFormatter.resolvedOptions().timeZone;\n}\n\nexport async function createTimeZoneItems(\n  locale: SupportedLocale,\n  messages: InputTimeZoneMessages,\n  mode: TimeZoneMode,\n  referenceDate: Date,\n  standardTime: OffsetStyle,\n): Promise<TimeZoneItem[] | TimeZoneItemGroup[]> {\n  if (mode === \"name\") {\n    const { groupByName } = await import(\"timezone-groups/dist/groupByName/index.mjs\");\n    const groups = await groupByName();\n\n    return groups\n      .map<TimeZoneItem<string>>(({ label: timeZone }) => {\n        const label = toUserFriendlyName(timeZone);\n        const value = timeZone;\n\n        return {\n          label,\n          value,\n          filterValue: timeZone,\n        };\n      })\n      .filter((group) => !!group)\n      .sort();\n  }\n\n  const effectiveLocale =\n    standardTime === \"user\"\n      ? locale\n      : // we use locales that will always yield a short offset that matches `standardTime`\n        standardTime === \"utc\"\n        ? \"fr\"\n        : \"en-GB\";\n  const referenceDateInMs: number = referenceDate.getTime();\n\n  if (mode === \"region\") {\n    const [{ groupByRegion }, { getCountry }] = await Promise.all([\n      import(\"timezone-groups/dist/groupByRegion/index.mjs\"),\n      import(\"timezone-groups/dist/utils/country.mjs\"),\n    ]);\n    const groups = await groupByRegion();\n\n    return groups\n      .map<TimeZoneItemGroup>(({ label: region, tzs }) => {\n        return {\n          label: region,\n          items: tzs.map((timeZone) => {\n            const decimalOffset = timeZoneOffsetToDecimal(\n              getTimeZoneShortOffset(timeZone, effectiveLocale, referenceDateInMs),\n            );\n\n            return {\n              label: getTimeZoneLabel(timeZone, messages),\n              value: timeZone,\n              filterValue: toUserFriendlyName(timeZone),\n              metadata: {\n                offset: decimalOffset,\n                country: getCountry(timeZone),\n              },\n            };\n          }),\n        };\n      })\n      .sort((groupA, groupB) => groupA.label.localeCompare(groupB.label));\n  }\n\n  const [{ groupByOffset }, { DateEngine }] = await Promise.all([\n    import(\"timezone-groups/dist/groupByOffset/index.mjs\"),\n    import(\"timezone-groups/dist/groupByOffset/strategy/native/index.mjs\"),\n  ]);\n\n  const groups = await groupByOffset({\n    dateEngine: new DateEngine(),\n    groupDateRange: 1,\n    startDate: new Date(referenceDateInMs).toISOString(),\n  });\n\n  const listFormatter = new Intl.ListFormat(locale, { style: \"long\", type: \"conjunction\" });\n\n  // we remove blocked entries from tzs and adjust label indices accordingly\n  groups.forEach((group) => {\n    const indexOffsets: number[] = [];\n    let removedSoFar = 0;\n\n    group.tzs.forEach((tz, index) => {\n      if (timeZoneNameBlockList.includes(tz)) {\n        removedSoFar++;\n      }\n      indexOffsets[index] = removedSoFar;\n    });\n\n    group.tzs = group.tzs.filter((tz) => !timeZoneNameBlockList.includes(tz));\n\n    group.labelTzIdx = group.labelTzIdx\n      .map((index) => index - indexOffsets[index])\n      .filter((index) => index >= 0 && index < group.tzs.length);\n  });\n\n  return groups\n    .map<TimeZoneItem<number>>(({ labelTzIdx, tzs }) => {\n      const groupRepTz = tzs[0];\n      const decimalOffset = timeZoneOffsetToDecimal(\n        getTimeZoneShortOffset(groupRepTz, effectiveLocale, referenceDateInMs),\n      );\n      const value = toOffsetValue(groupRepTz, referenceDateInMs);\n      const tzLabels = labelTzIdx.map((index: number) => getTimeZoneLabel(tzs[index], messages));\n      const label = createTimeZoneOffsetLabel(messages, decimalOffset, listFormatter.format(tzLabels));\n\n      return {\n        label,\n        value,\n        filterValue: tzs.map((tz) => toUserFriendlyName(tz)),\n      };\n    })\n    .filter((group) => !!group)\n    .sort((groupA, groupB) => groupA.value - groupB.value);\n}\n\nfunction getTimeZoneLabel(timeZone: string, messages: InputTimeZoneMessages): string {\n  return messages[timeZone] || getCity(timeZone);\n}\n\nexport function getSelectedRegionTimeZoneLabel(city: string, country: string, messages: InputTimeZoneMessages): string {\n  const template = messages.timeZoneRegionLabel;\n  return template.replace(\"{city}\", city).replace(\"{country}\", getMessageOrKeyFallback(messages, country));\n}\n\nexport function getMessageOrKeyFallback(messages: InputTimeZoneMessages, key: string): string {\n  return messages[key] || key;\n}\n\n/**\n * Exported for testing purposes only\n *\n * @internal\n */\nexport function getCity(timeZone: string): string {\n  return timeZone.split(\"/\").pop();\n}\n\n/**\n * Exported for testing purposes only\n *\n * @internal\n */\nexport function toUserFriendlyName(timeZoneName: string): string {\n  return timeZoneName.replace(/_/g, \" \");\n}\n\nfunction createTimeZoneOffsetLabel(messages: InputTimeZoneMessages, offsetLabel: string, groupLabel: string): string {\n  return messages.timeZoneLabel.replace(\"{offset}\", offsetLabel).replace(\"{cities}\", groupLabel);\n}\n\nfunction getTimeZoneShortOffset(\n  timeZone: TimeZone,\n  locale: SupportedLocale,\n  referenceDateInMs: number = Date.now(),\n): string {\n  const dateTimeFormat = getDateTimeFormat(locale, { timeZone, timeZoneName: \"shortOffset\" });\n  const parts = dateTimeFormat.formatToParts(referenceDateInMs);\n  return parts.find(({ type }) => type === \"timeZoneName\").value;\n}\n\nfunction isGroup(item: TimeZoneItem | TimeZoneItemGroup): item is TimeZoneItemGroup {\n  return (item as TimeZoneItemGroup).items !== undefined;\n}\n\nfunction flattenTimeZoneItems(timeZoneItems: TimeZoneItem[] | TimeZoneItemGroup[]): TimeZoneItem[] {\n  return isGroup(timeZoneItems[0]) ? timeZoneItems.flatMap((item) => item.items) : timeZoneItems;\n}\n\nexport function findTimeZoneItemByProp(\n  timeZoneItems: TimeZoneItem[] | TimeZoneItemGroup[],\n  prop: string,\n  valueToMatch: string | number | null,\n): TimeZoneItem | null {\n  return valueToMatch == null\n    ? null\n    : flattenTimeZoneItems(timeZoneItems).find(\n        (item) =>\n          // intentional == to match string to number\n          item[prop] == valueToMatch,\n      );\n}\n",":host {\n  display: block;\n}\n\n.offset {\n  white-space: nowrap;\n}\n\n@include base-component();\n@include disabled();\n@include hidden-form-input();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { connectLabel, disconnectLabel, LabelableComponent } from \"../../utils/label\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  LocalizedComponent,\n  SupportedLocale,\n} from \"../../utils/locale\";\nimport { Scale, Status } from \"../interfaces\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { OverlayPositioning } from \"../../utils/floating-ui\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  afterConnectDefaultValueSet,\n  connectForm,\n  disconnectForm,\n  FormComponent,\n  HiddenFormInputSlot,\n  MutableValidityState,\n} from \"../../utils/form\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { CSS } from \"./resources\";\nimport {\n  createTimeZoneItems,\n  findTimeZoneItemByProp,\n  getMessageOrKeyFallback,\n  getSelectedRegionTimeZoneLabel,\n  getUserTimeZoneName,\n  getUserTimeZoneOffset,\n} from \"./utils\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\nimport { OffsetStyle, TimeZoneItem, TimeZoneItemGroup, TimeZoneMode } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-input-time-zone\",\n  styleUrl: \"input-time-zone.scss\",\n  assetsDirs: [\"assets\"],\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class InputTimeZone\n  implements\n    FormComponent,\n    InteractiveComponent,\n    LabelableComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    T9nComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, an empty value (`null`) will be allowed as a `value`.\n   *\n   * When `false`, an offset or name value is enforced, and clearing the input or blurring will restore the last valid `value`.\n   */\n  @Prop({ reflect: true }) clearable = false;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true }) form: string;\n\n  /** Specifies the component's maximum number of options to display before displaying a scrollbar. */\n  @Prop({ reflect: true }) maxItems = 0;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: InputTimeZoneMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<InputTimeZoneMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * This specifies the type of `value` and the associated options presented to the user:\n   *\n   * Using `\"offset\"` will provide options that show timezone offsets.\n   *\n   * Using `\"name\"` will provide options that show the IANA time zone names.\n   *\n   * @default \"offset\"\n   */\n  @Prop({ reflect: true }) mode: TimeZoneMode = \"offset\";\n\n  @Watch(\"messages\")\n  @Watch(\"mode\")\n  @Watch(\"referenceDate\")\n  handleTimeZoneItemPropsChange(): void {\n    this.updateTimeZoneItemsAndSelection();\n  }\n\n  /**\n   * Specifies how the offset will be displayed, where\n   *\n   * `\"user\"` uses `UTC` or `GMT` depending on the user's locale,\n   * `\"gmt\"` always uses `GMT`, and\n   * `\"utc\"` always uses `UTC`.\n   *\n   * This only applies to the `offset` mode.\n   *\n   * @default \"user\"\n   */\n  @Prop({ reflect: true }) offsetStyle: OffsetStyle = \"user\";\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: IconNameOrString | boolean;\n\n  /**\n   * The current validation state of the component.\n   *\n   * @readonly\n   * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated in form util when syncing hidden input\n  @Prop({ mutable: true }) validity: MutableValidityState = {\n    valid: false,\n    badInput: false,\n    customError: false,\n    patternMismatch: false,\n    rangeOverflow: false,\n    rangeUnderflow: false,\n    stepMismatch: false,\n    tooLong: false,\n    tooShort: false,\n    typeMismatch: false,\n    valueMissing: false,\n  };\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /** When `true`, displays and positions the component. */\n  @Prop({ mutable: true, reflect: true }) open = false;\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /**\n   * This `date` will be used as a reference to Daylight Savings Time when creating time zone item groups.\n   *\n   * It can be either a Date instance or a string in ISO format (`\"YYYY-MM-DD\"`, `\"YYYY-MM-DDTHH:MM:SS.SSSZ\"`).\n   *\n   * @see [Date.prototype.toISOString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n   */\n  @Prop() referenceDate: Date | string;\n\n  /**\n   * When `true`, the component must have a value in order for the form to submit.\n   *\n   * @internal\n   */\n  @Prop({ reflect: true }) required = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /**\n   * The component's value, where the value is the time zone offset or the difference, in minutes, between the selected time zone and UTC.\n   *\n   * If no value is provided, the user's time zone offset will be selected by default.\n   *\n   * @see https://www.w3.org/International/core/2005/09/timezone.html#:~:text=What%20is%20a%20%22zone%20offset,or%20%22%2D%22%20from%20UTC.\n   */\n  @Prop({ mutable: true }) value: string;\n\n  @Watch(\"value\")\n  handleValueChange(value: string, oldValue: string): void {\n    value = this.normalizeValue(value);\n\n    if (!value && this.clearable) {\n      this.value = value;\n      this.selectedTimeZoneItem = null;\n      return;\n    }\n\n    const timeZoneItem = this.findTimeZoneItem(value);\n\n    if (!timeZoneItem) {\n      this.value = oldValue;\n      return;\n    }\n\n    this.selectedTimeZoneItem = timeZoneItem;\n  }\n\n  /**\n   * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.\n   */\n  @Prop({ reflect: true }) readOnly = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    await this.comboboxEl.setFocus();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the component is requested to be closed and before the closing transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeClose: EventEmitter<void>;\n\n  /**\n   * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeOpen: EventEmitter<void>;\n\n  /**\n   * Fires when the component's `value` changes.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneChange: EventEmitter<void>;\n\n  /**\n   * Fires after the component is closed and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneClose: EventEmitter<void>;\n\n  /**\n   * Fires after the component is opened and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneOpen: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteInputTimeZoneElement;\n\n  private comboboxEl: HTMLCalciteComboboxElement;\n\n  @State() defaultMessages: InputTimeZoneMessages;\n\n  defaultValue: InputTimeZone[\"value\"];\n\n  @State() effectiveLocale: SupportedLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleWatcher(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  formEl: HTMLFormElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  private selectedTimeZoneItem: TimeZoneItem;\n\n  private timeZoneItems: TimeZoneItem[] | TimeZoneItemGroup[];\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  onLabelClick(): void {\n    this.setFocus();\n  }\n\n  private setComboboxRef = (el: HTMLCalciteComboboxElement): void => {\n    this.comboboxEl = el;\n  };\n\n  /**\n   * Helps override the selected item's label for region mode outside of item rendering logic to avoid flickering text change\n   *\n   * @param open\n   * @private\n   */\n  private overrideSelectedLabelForRegion(open: boolean): void {\n    if (this.mode !== \"region\" || !this.selectedTimeZoneItem) {\n      return;\n    }\n\n    const { label, metadata } = this.selectedTimeZoneItem;\n    this.comboboxEl.selectedItems[0].textLabel = open\n      ? label\n      : getSelectedRegionTimeZoneLabel(label, metadata.country, this.messages);\n  }\n\n  private onComboboxBeforeClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.overrideSelectedLabelForRegion(false);\n    this.calciteInputTimeZoneBeforeClose.emit();\n  };\n\n  private onComboboxBeforeOpen = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.overrideSelectedLabelForRegion(true);\n    this.calciteInputTimeZoneBeforeOpen.emit();\n  };\n\n  private onComboboxChange = (event: CustomEvent): void => {\n    event.stopPropagation();\n    const combobox = event.target as HTMLCalciteComboboxElement;\n    const selectedItem = combobox.selectedItems[0];\n\n    if (!selectedItem) {\n      this.value = null;\n      this.selectedTimeZoneItem = null;\n      this.calciteInputTimeZoneChange.emit();\n      return;\n    }\n\n    const selected = this.findTimeZoneItemByLabel(selectedItem.textLabel);\n\n    const selectedValue = `${selected.value}`;\n\n    if (this.value === selectedValue && selected.label === this.selectedTimeZoneItem.label) {\n      return;\n    }\n\n    this.value = selectedValue;\n    this.selectedTimeZoneItem = selected;\n    this.calciteInputTimeZoneChange.emit();\n  };\n\n  private onComboboxClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.open = false;\n    this.calciteInputTimeZoneClose.emit();\n  };\n\n  private onComboboxOpen = (event: CustomEvent): void => {\n    this.open = true;\n    event.stopPropagation();\n    this.calciteInputTimeZoneOpen.emit();\n  };\n\n  private findTimeZoneItem(value: number | string | null): TimeZoneItem | null {\n    return findTimeZoneItemByProp(this.timeZoneItems, \"value\", value);\n  }\n\n  private findTimeZoneItemByLabel(label: string | null): TimeZoneItem | null {\n    return findTimeZoneItemByProp(this.timeZoneItems, \"label\", label);\n  }\n\n  private async updateTimeZoneItemsAndSelection(): Promise<void> {\n    this.timeZoneItems = await this.createTimeZoneItems();\n\n    if (this.value === \"\" && this.clearable) {\n      this.selectedTimeZoneItem = null;\n      return;\n    }\n\n    const fallbackValue = this.mode === \"offset\" ? getUserTimeZoneOffset() : getUserTimeZoneName();\n    const valueToMatch = this.value ?? fallbackValue;\n\n    this.selectedTimeZoneItem =\n      this.findTimeZoneItem(valueToMatch) || this.findTimeZoneItem(fallbackValue);\n  }\n\n  private async createTimeZoneItems(): Promise<TimeZoneItem[] | TimeZoneItemGroup[]> {\n    if (!this.effectiveLocale || !this.messages) {\n      return [];\n    }\n\n    return createTimeZoneItems(\n      this.effectiveLocale,\n      this.messages,\n      this.mode,\n      this.referenceDate instanceof Date\n        ? this.referenceDate\n        : new Date(this.referenceDate ?? Date.now()),\n      this.offsetStyle,\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectForm(this);\n    connectLabel(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectForm(this);\n    disconnectLabel(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  private normalizeValue(value: string | null): string {\n    return value === null ? \"\" : value;\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n    this.value = this.normalizeValue(this.value);\n\n    await this.updateTimeZoneItemsAndSelection();\n\n    const selectedValue = this.selectedTimeZoneItem ? `${this.selectedTimeZoneItem.value}` : null;\n    afterConnectDefaultValueSet(this, selectedValue);\n    this.value = selectedValue;\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n    this.overrideSelectedLabelForRegion(this.open);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  render(): VNode {\n    return (\n      <Host>\n        <InteractiveContainer disabled={this.disabled}>\n          <calcite-combobox\n            clearDisabled={!this.clearable}\n            disabled={this.disabled}\n            label={this.messages.chooseTimeZone}\n            lang={this.effectiveLocale}\n            maxItems={this.maxItems}\n            onCalciteComboboxBeforeClose={this.onComboboxBeforeClose}\n            onCalciteComboboxBeforeOpen={this.onComboboxBeforeOpen}\n            onCalciteComboboxChange={this.onComboboxChange}\n            onCalciteComboboxClose={this.onComboboxClose}\n            onCalciteComboboxOpen={this.onComboboxOpen}\n            open={this.open}\n            overlayPositioning={this.overlayPositioning}\n            placeholder={\n              this.mode === \"name\"\n                ? this.messages.namePlaceholder\n                : this.mode === \"offset\"\n                  ? this.messages.offsetPlaceholder\n                  : this.messages.regionPlaceholder\n            }\n            placeholderIcon=\"search\"\n            readOnly={this.readOnly}\n            ref={this.setComboboxRef}\n            scale={this.scale}\n            selectionMode={this.clearable ? \"single\" : \"single-persist\"}\n            status={this.status}\n            validation-icon={this.validationIcon}\n            validation-message={this.validationMessage}\n          >\n            {this.renderItems()}\n          </calcite-combobox>\n          <HiddenFormInputSlot component={this} />\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n\n  private renderItems(): VNode[] {\n    if (this.mode === \"region\") {\n      return this.renderRegionItems();\n    }\n\n    return this.timeZoneItems.map((group) => {\n      const selected = this.selectedTimeZoneItem === group;\n      const { label, value } = group;\n\n      return (\n        <calcite-combobox-item\n          data-value={value}\n          key={label}\n          selected={selected}\n          textLabel={label}\n          value={`${group.filterValue}`}\n        />\n      );\n    });\n  }\n\n  private renderRegionItems(): VNode[] {\n    return (this.timeZoneItems as TimeZoneItemGroup[]).flatMap(({ label, items }) => (\n      <calcite-combobox-item-group\n        key={label}\n        label={getMessageOrKeyFallback(this.messages, label)}\n      >\n        {items.map((item) => {\n          const selected = this.selectedTimeZoneItem === item;\n          const { label, value } = item;\n\n          return (\n            <calcite-combobox-item\n              data-value={value}\n              description={getMessageOrKeyFallback(this.messages, item.metadata.country)}\n              key={label}\n              metadata={item.metadata}\n              selected={selected}\n              textLabel={label}\n              value={`${item.filterValue}`}\n            >\n              <span class={CSS.offset} slot=\"content-end\">\n                {item.metadata.offset}\n              </span>\n            </calcite-combobox-item>\n          );\n        })}\n      </calcite-combobox-item-group>\n    ));\n  }\n}\n","export const CSS = {\n  list: \"list\",\n  label: \"label\",\n  title: \"title\",\n};\n","import { Component, Element, h, Prop, VNode } from \"@stencil/core\";\nimport { guid } from \"../../utils/guid\";\nimport { ComboboxChildElement } from \"../combobox/interfaces\";\nimport { getAncestors, getDepth } from \"../combobox/utils\";\nimport { Scale } from \"../interfaces\";\nimport { CSS } from \"./resources\";\n\n/**\n * @slot - A slot for adding `calcite-combobox-item`s.\n */\n@Component({\n  tag: \"calcite-combobox-item-group\",\n  styleUrl: \"combobox-item-group.scss\",\n  shadow: true,\n})\nexport class ComboboxItemGroup {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, signifies that the group comes after another group without any children (items or sub-groups), otherwise indicates that the group comes after another group that has children. Used for styling.\n   *\n   * @internal\n   */\n  @Prop({ reflect: true }) afterEmptyGroup = false;\n\n  /** Specifies the parent and grandparent `calcite-combobox-item`s, which are set on `calcite-combobox`. */\n  @Prop({ mutable: true }) ancestors: ComboboxChildElement[];\n\n  /** Specifies the title of the component. */\n  @Prop() label!: string;\n\n  /**\n   * Specifies the size of the component inherited from the `calcite-combobox`, defaults to `m`.\n   *\n   * @internal\n   */\n  @Prop() scale: Scale = \"m\";\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.ancestors = getAncestors(this.el);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteComboboxItemGroupElement;\n\n  guid: string = guid();\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    const { el, scale } = this;\n    const depth = getDepth(el);\n\n    return (\n      <ul\n        aria-labelledby={this.guid}\n        class={{ [CSS.list]: true, [`scale--${scale}`]: true }}\n        role=\"group\"\n      >\n        <li\n          class={{ [CSS.label]: true }}\n          id={this.guid}\n          role=\"presentation\"\n          style={{ \"--calcite-combobox-item-spacing-indent-multiplier\": `${depth}` }}\n        >\n          <span class={CSS.title}>{this.label}</span>\n        </li>\n        <slot />\n      </ul>\n    );\n  }\n}\n",".scale--s {\n  @apply text-n2h;\n  --calcite-combobox-item-spacing-unit-l: theme(\"spacing.2\");\n  --calcite-combobox-item-spacing-unit-s: theme(\"spacing.1\");\n  --calcite-combobox-item-spacing-indent: theme(\"spacing.2\");\n}\n\n.scale--m {\n  @apply text-n1h;\n  --calcite-combobox-item-spacing-unit-l: theme(\"spacing.3\");\n  --calcite-combobox-item-spacing-unit-s: theme(\"spacing.2\");\n  --calcite-combobox-item-spacing-indent: theme(\"spacing.3\");\n}\n\n.scale--l {\n  @apply text-0h;\n  --calcite-combobox-item-spacing-unit-l: theme(\"spacing.4\");\n  --calcite-combobox-item-spacing-unit-s: theme(\"spacing.3\");\n  --calcite-combobox-item-spacing-indent: theme(\"spacing.4\");\n}\n\n:host,\n.list {\n  @apply m-0 flex flex-col p-0;\n}\n\n:host(:focus),\n.list:focus {\n  @apply outline-none;\n}\n\n.label {\n  @apply text-color-3 box-border flex w-full min-w-0 max-w-full;\n}\n\n.title {\n  --calcite-combobox-item-indent-value: calc(\n    var(--calcite-combobox-item-spacing-indent) * var(--calcite-combobox-item-spacing-indent-multiplier)\n  );\n  border: 0 solid;\n  @apply border-b-color-3\n    text-color-2\n    word-break\n    block\n    flex-1\n    border-b\n    font-bold;\n  padding-block: var(--calcite-combobox-item-spacing-unit-l);\n  padding-inline: var(--calcite-combobox-item-spacing-unit-s);\n  margin-inline-start: var(--calcite-combobox-item-indent-value);\n}\n\n::slotted(calcite-combobox-item-group:not([after-empty-group])) {\n  padding-block-start: var(--calcite-combobox-item-spacing-unit-l);\n}\n\n@include base-component();\n"],"names":["CSS","timeZoneNameBlockList","timeZoneOffsetToDecimal","shortOffsetTimeZoneName","replace","toOffsetValue","timeZoneName","referenceDateInMs","offset","getTimeZoneShortOffset","Number","createTimeZoneItems","_createTimeZoneItems","locale","messages","mode","referenceDate","standardTime","_context5","_yield$import","groupByName","groups","map","timeZone","label","toUserFriendlyName","value","filterValue","filter","group","sort","effectiveLocale","getTime","Promise","all","_yield$Promise$all","_yield$Promise$all2","groupByRegion","getCountry","items","tzs","decimalOffset","getTimeZoneLabel","metadata","country","groupA","groupB","localeCompare","_yield$Promise$all3","_yield$Promise$all4","groupByOffset","DateEngine","dateEngine","groupDateRange","startDate","Date","toISOString","listFormatter","Intl","ListFormat","style","type","forEach","indexOffsets","removedSoFar","tz","index","includes","labelTzIdx","length","groupRepTz","tzLabels","createTimeZoneOffsetLabel","format","split","pop","getCity","getMessageOrKeyFallback","key","offsetLabel","groupLabel","timeZoneLabel","now","dateTimeFormat","getDateTimeFormat","parts","formatToParts","find","findTimeZoneItemByProp","timeZoneItems","prop","valueToMatch","undefined","flatMap","item","flattenTimeZoneItems","InputTimeZone","_inherits","_this","el","comboboxEl","event","stopPropagation","overrideSelectedLabelForRegion","calciteInputTimeZoneBeforeClose","emit","calciteInputTimeZoneBeforeOpen","selectedItem","target","selectedItems","selectedTimeZoneItem","calciteInputTimeZoneChange","selected","findTimeZoneItemByLabel","textLabel","selectedValue","open","calciteInputTimeZoneClose","calciteInputTimeZoneOpen","valid","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","this","updateTimeZoneItemsAndSelection","oldValue","normalizeValue","clearable","timeZoneItem","findTimeZoneItem","_context","componentFocusable","setFocus","updateMessages","city","timeZoneRegionLabel","_context2","fallbackValue","getTimezoneOffset","DateTimeFormat","resolvedOptions","_context3","offsetStyle","connectForm","connectLabel","connectLocalized","connectMessages","disconnectForm","disconnectLabel","disconnectLocalized","disconnectMessages","setUpLoadableComponent","_context4","setUpMessages","afterConnectDefaultValueSet","setComponentLoaded","updateHostInteraction","h","Host","InteractiveContainer","disabled","clearDisabled","chooseTimeZone","lang","maxItems","onCalciteComboboxBeforeClose","onComboboxBeforeClose","onCalciteComboboxBeforeOpen","onComboboxBeforeOpen","onCalciteComboboxChange","onComboboxChange","onCalciteComboboxClose","onComboboxClose","onCalciteComboboxOpen","onComboboxOpen","overlayPositioning","placeholder","namePlaceholder","offsetPlaceholder","regionPlaceholder","placeholderIcon","readOnly","ref","setComboboxRef","scale","selectionMode","status","validationIcon","validationMessage","renderItems","HiddenFormInputSlot","component","renderRegionItems","_this2","_this3","description","class","slot","get","HTMLElement","ComboboxItemGroup","guid","ancestors","getAncestors","depth","getDepth","role","id"],"sourceRoot":""}