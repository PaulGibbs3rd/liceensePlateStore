{"version":3,"file":"static/js/77244.5299831d.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/functional/Validation.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/icon/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/utils.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.scss?tag=calcite-icon&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/input-message/interfaces.ts","../node_modules/@esri/calcite-components/dist/components/src/components/input-message/input-message.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/input-message/input-message.scss?tag=calcite-input-message&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/input/common/input.ts","../node_modules/@esri/calcite-components/dist/components/src/components/progress/progress.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/progress/progress.scss?tag=calcite-progress&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/utils/t9n.ts"],"sourcesContent":["import { FunctionalComponent, h, VNode } from \"@stencil/core\";\nimport { JSXBase } from \"@stencil/core/internal\";\nimport { Scale, Status } from \"../interfaces\";\nimport { IconNameOrString } from \"../icon/interfaces\";\n\ninterface ValidationProps extends JSXBase.HTMLAttributes {\n  scale: Scale;\n  status: Status;\n  icon?: IconNameOrString | boolean;\n  id?: string;\n  message: string;\n}\n\nexport const CSS = {\n  validationContainer: \"validation-container\",\n};\n\nexport const Validation: FunctionalComponent<ValidationProps> = ({\n  scale,\n  status,\n  id,\n  icon,\n  message,\n}): VNode => (\n  <div class={CSS.validationContainer}>\n    <calcite-input-message aria-live=\"polite\" icon={icon} id={id} scale={scale} status={status}>\n      {message}\n    </calcite-input-message>\n  </div>\n);\n","export const CSS = {\n  icon: \"icon\",\n  flipRtl: \"flip-rtl\",\n};\n","import { CalciteIconPath } from \"@esri/calcite-ui-icons\";\nimport { getAssetPath } from \"@stencil/core\";\nimport { Scale } from \"../interfaces\";\nimport { IconNameOrString } from \"./interfaces\";\n\nexport interface FetchIconProps {\n  icon: IconNameOrString;\n  scale: Scale;\n}\n\n/**\n * Icon data cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const iconCache: Record<string, CalciteIconPath> = {};\n\n/**\n * Icon request cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const requestCache: Record<string, Promise<CalciteIconPath>> = {};\n\nexport const scaleToPx: Record<Scale, number> = {\n  s: 16,\n  m: 24,\n  l: 32,\n};\n\nfunction generateIconId({ icon, scale }: FetchIconProps): string {\n  const size = scaleToPx[scale];\n  const name = normalizeIconName(icon);\n  const filled = name.charAt(name.length - 1) === \"F\";\n  const iconName = filled ? name.substring(0, name.length - 1) : name;\n\n  return `${iconName}${size}${filled ? \"F\" : \"\"}`;\n}\n\nexport async function fetchIcon(props: FetchIconProps): Promise<CalciteIconPath> {\n  const cachedIconKey = generateIconId(props);\n  const cachedIconData = getCachedIconDataByKey(cachedIconKey);\n\n  if (cachedIconData) {\n    return cachedIconData;\n  }\n\n  if (!requestCache[cachedIconKey]) {\n    requestCache[cachedIconKey] = fetch(getAssetPath(`./assets/icon/${cachedIconKey}.json`))\n      .then((resp) => resp.json())\n      .catch(() => {\n        console.error(`\"${cachedIconKey}\" is not a valid calcite-ui-icon name`);\n        return \"\";\n      });\n  }\n\n  const path = await requestCache[cachedIconKey];\n  iconCache[cachedIconKey] = path;\n\n  return path;\n}\n\n/**\n * Util to retrieve cached icon data based on icon name and scale.\n *\n * @param props – icon properties\n */\nexport function getCachedIconData(props: FetchIconProps): CalciteIconPath {\n  return getCachedIconDataByKey(generateIconId(props));\n}\n\nfunction getCachedIconDataByKey(id: string): CalciteIconPath {\n  return iconCache[id];\n}\n\n/**\n * Normalize the icon name to match the path data module exports.\n * Exported for testing purposes.\n *\n * @param name – an icon name that can be either kebab or camel-cased\n * @private\n */\nexport function normalizeIconName(name: string): string {\n  const numberLeadingName = !isNaN(Number(name.charAt(0)));\n  const parts = name.split(\"-\");\n  const kebabCased = parts.length > 0;\n\n  if (kebabCased) {\n    const firstNonDigitInPartPattern = /[a-z]/i;\n\n    name = parts\n      .map((part, partIndex) => {\n        return part.replace(firstNonDigitInPartPattern, function replacer(match, offset) {\n          const isFirstCharInName = partIndex === 0 && offset === 0;\n\n          if (isFirstCharInName) {\n            return match;\n          }\n\n          return match.toUpperCase();\n        });\n      })\n      .join(\"\");\n  }\n\n  return numberLeadingName ? `i${name}` : name;\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-ui-icon-color: [Deprecated] Use --calcite-icon-color. Specifies the component's color. Defaults to `currentColor`.\n * @prop --calcite-icon-color: Specifies the component's color. Defaults to `currentColor`.\n */\n\n:host {\n  @apply text-color-icon inline-flex;\n}\n\n$icon-size-s: 16px;\n$icon-size-m: 24px;\n$icon-size-l: 32px;\n\n:host([scale=\"s\"]) {\n  inline-size: $icon-size-s;\n  block-size: $icon-size-s;\n  min-inline-size: $icon-size-s;\n  min-block-size: $icon-size-s;\n}\n\n:host([scale=\"m\"]) {\n  inline-size: $icon-size-m;\n  block-size: $icon-size-m;\n  min-inline-size: $icon-size-m;\n  min-block-size: $icon-size-m;\n}\n\n:host([scale=\"l\"]) {\n  inline-size: $icon-size-l;\n  block-size: $icon-size-l;\n  min-inline-size: $icon-size-l;\n  min-block-size: $icon-size-l;\n}\n\n.flip-rtl {\n  transform: scaleX(-1);\n}\n\n.svg {\n  @apply block;\n}\n\n@include base-component();\n","import { CalciteIconPath, CalciteMultiPathEntry } from \"@esri/calcite-ui-icons\";\nimport { Component, Element, h, Host, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { getElementDir, toAriaBoolean } from \"../../utils/dom\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale } from \"../interfaces\";\nimport { isBrowser } from \"../../utils/browser\";\nimport { CSS } from \"./resources\";\nimport { fetchIcon, getCachedIconData, scaleToPx } from \"./utils\";\nimport { IconNameOrString } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-icon\",\n  styleUrl: \"icon.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Icon {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Displays a specific icon.\n   *\n   * @see [Icons](https://esri.github.io/calcite-ui-icons)\n   */\n  @Prop({\n    reflect: true,\n  })\n  icon: IconNameOrString = null;\n\n  /**\n   * When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).\n   */\n  @Prop({\n    reflect: true,\n  })\n  flipRtl = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({\n    reflect: true,\n  })\n  scale: Scale = \"m\";\n\n  /**\n   * Accessible name for the component.\n   *\n   * It is recommended to set this value if your icon is semantic.\n   */\n  @Prop()\n  textLabel: string;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    if (!this.visible) {\n      this.waitUntilVisible(() => {\n        this.visible = true;\n        this.loadIconPathData();\n      });\n    }\n  }\n\n  disconnectedCallback(): void {\n    this.intersectionObserver?.disconnect();\n    this.intersectionObserver = null;\n  }\n\n  render(): VNode {\n    const { el, flipRtl, pathData, scale, textLabel } = this;\n    const dir = getElementDir(el);\n    const size = scaleToPx[scale];\n    const semantic = !!textLabel;\n    const paths = [].concat(pathData || \"\");\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(!semantic)}\n        aria-label={semantic ? textLabel : null}\n        role={semantic ? \"img\" : null}\n      >\n        <svg\n          aria-hidden=\"true\"\n          class={{\n            [CSS.flipRtl]: dir === \"rtl\" && flipRtl,\n            svg: true,\n          }}\n          fill=\"currentColor\"\n          height=\"100%\"\n          viewBox={`0 0 ${size} ${size}`}\n          width=\"100%\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          {paths.map((path: string | CalciteMultiPathEntry) =>\n            typeof path === \"string\" ? (\n              <path d={path} />\n            ) : (\n              <path d={path.d} opacity={\"opacity\" in path ? path.opacity : 1} />\n            ),\n          )}\n        </svg>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteIconElement;\n\n  private intersectionObserver: IntersectionObserver;\n\n  @State()\n  private pathData: CalciteIconPath;\n\n  @State()\n  private visible = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"icon\")\n  @Watch(\"scale\")\n  private async loadIconPathData(): Promise<void> {\n    const { icon, scale, visible } = this;\n\n    if (!isBrowser() || !icon || !visible) {\n      return;\n    }\n\n    const fetchIconProps = { icon, scale };\n    const pathData = getCachedIconData(fetchIconProps) || (await fetchIcon(fetchIconProps));\n\n    // While the fetchIcon method is awaiting response, the icon requested can change. This check is to verify the response received belongs to the current icon.\n    if (icon !== this.icon) {\n      return;\n    }\n\n    this.pathData = pathData;\n  }\n\n  private waitUntilVisible(callback: () => void): void {\n    this.intersectionObserver = createObserver(\n      \"intersection\",\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            this.intersectionObserver.disconnect();\n            this.intersectionObserver = null;\n            callback();\n          }\n        });\n      },\n      { rootMargin: \"50px\" },\n    );\n\n    if (!this.intersectionObserver) {\n      callback();\n      return;\n    }\n\n    this.intersectionObserver.observe(this.el);\n  }\n}\n","export const StatusIconDefaults = {\n  valid: \"check-circle\",\n  invalid: \"exclamation-mark-triangle\",\n  idle: \"information\",\n} as const;\n","import { Component, Element, h, Host, Prop, VNode, Watch } from \"@stencil/core\";\nimport { setRequestedIcon } from \"../../utils/dom\";\nimport { Scale, Status } from \"../interfaces\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { StatusIconDefaults } from \"./interfaces\";\n\n/**\n * @slot - A slot for adding text.\n */\n@Component({\n  tag: \"calcite-input-message\",\n  styleUrl: \"input-message.scss\",\n  shadow: true,\n})\nexport class InputMessage {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies an icon to display. */\n  @Prop({ reflect: true }) icon: IconNameOrString | boolean;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  @Watch(\"status\")\n  @Watch(\"icon\")\n  handleIconEl(): void {\n    this.requestedIcon = setRequestedIcon(StatusIconDefaults, this.icon, this.status);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.requestedIcon = setRequestedIcon(StatusIconDefaults, this.icon, this.status);\n  }\n\n  render(): VNode {\n    const hidden = this.el.hidden;\n    return (\n      <Host calcite-hydrated-hidden={hidden}>\n        {this.renderIcon(this.requestedIcon)}\n        <slot />\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteInputMessageElement;\n\n  /** the computed icon to render */\n  private requestedIcon?: IconNameOrString;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private renderIcon(iconName: IconNameOrString): VNode {\n    if (iconName) {\n      return (\n        <calcite-icon\n          class=\"calcite-input-message-icon\"\n          flipRtl={this.iconFlipRtl}\n          icon={iconName}\n          scale=\"s\"\n        />\n      );\n    }\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-input-message-spacing-value: The top margin spacing above the component.\n */\n\n:host {\n  @apply text-color-1 transition-default box-border flex h-auto w-full items-center font-medium opacity-100;\n  --calcite-input-message-spacing-value: theme(\"spacing.1\");\n  margin-block-start: var(--calcite-input-message-spacing-value);\n}\n\n.calcite-input-message-icon {\n  @apply transition-default pointer-events-none inline-flex flex-shrink-0;\n  margin-inline-end: theme(\"margin.2\");\n}\n\n:host([status=\"invalid\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-status-danger);\n}\n\n:host([status=\"warning\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-status-warning);\n}\n\n:host([status=\"valid\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-status-success);\n}\n\n:host([status=\"idle\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-brand);\n}\n\n:host([scale=\"s\"]) {\n  @apply text-n3h;\n}\n\n:host([scale=\"m\"]) {\n  @apply text-n2h;\n}\n\n:host([scale=\"l\"]) {\n  @apply text-n1h;\n}\n\n@include base-component();\n","export type InputComponent = NumericInputComponent | TextualInputComponent | DateTimeInputComponent;\n\nexport interface DateTimeInputComponent {\n  min: string;\n  max: string;\n}\n\nexport interface NumericInputComponent {\n  min: number;\n  max: number;\n  step: number | \"any\";\n}\n\nexport interface TextualInputComponent {\n  pattern?: string;\n  minLength: number;\n  maxLength: number;\n}\n\n/**\n * Exported for testing purposes only\n */\nexport const minMaxStepTypes = [\"date\", \"datetime-local\", \"month\", \"number\", \"range\", \"time\", \"week\"];\n\n/**\n * Exported for testing purposes only\n */\nexport const patternTypes = [\"email\", \"password\", \"search\", \"tel\", \"text\", \"url\"];\n\n/**\n * Exported for testing purposes only\n */\nexport const minMaxLengthTypes = [\"email\", \"password\", \"search\", \"tel\", \"text\", \"textarea\", \"url\"];\n\nfunction updateConstraintValidation(\n  inputComponent: InputComponent,\n  input: HTMLInputElement,\n  propName: string,\n  matchesType: boolean,\n): void {\n  const attributeName = propName.toLowerCase();\n  const value = inputComponent[propName];\n\n  if (matchesType && value != null) {\n    input.setAttribute(attributeName, `${value}`);\n  } else {\n    // we remove the attribute to ensure validation-constraints are properly reset\n    input.removeAttribute(attributeName);\n  }\n}\n\n/**\n * Synchronizes the hidden form input with the validation-related input properties.\n *\n * Note: loss of precision is expected due to the hidden input's value and validation-constraint props being strings.\n *\n * @param type - The input type.\n * @param inputComponent\n * @param hiddenFormInput\n */\nexport function syncHiddenFormInput(\n  type: HTMLInputElement[\"type\"] | \"textarea\",\n  inputComponent: InputComponent,\n  hiddenFormInput: HTMLInputElement,\n): void {\n  hiddenFormInput.type = type === \"textarea\" ? \"text\" : type;\n\n  const isMinMaxStepType = minMaxStepTypes.includes(type);\n  const numericInputComponent = inputComponent as NumericInputComponent;\n\n  updateConstraintValidation(numericInputComponent, hiddenFormInput, \"min\", isMinMaxStepType);\n  updateConstraintValidation(numericInputComponent, hiddenFormInput, \"max\", isMinMaxStepType);\n  updateConstraintValidation(numericInputComponent, hiddenFormInput, \"step\", isMinMaxStepType);\n\n  const isMinMaxLengthType = minMaxLengthTypes.includes(type);\n\n  const textualInputComponent = inputComponent as TextualInputComponent;\n\n  updateConstraintValidation(textualInputComponent, hiddenFormInput, \"minLength\", isMinMaxLengthType);\n  updateConstraintValidation(textualInputComponent, hiddenFormInput, \"maxLength\", isMinMaxLengthType);\n\n  const isPatternType = patternTypes.includes(type);\n\n  updateConstraintValidation(textualInputComponent, hiddenFormInput, \"pattern\", isPatternType);\n}\n","import { Component, Element, h, Prop, VNode } from \"@stencil/core\";\nimport { getElementDir } from \"../../utils/dom\";\nimport { CSS_UTILITY } from \"../../utils/resources\";\n@Component({\n  tag: \"calcite-progress\",\n  styleUrl: \"progress.scss\",\n  shadow: true,\n})\nexport class Progress {\n  @Element() el: HTMLCalciteProgressElement;\n\n  /**\n   * Specifies the component type.\n   *\n   * Use `\"indeterminate\"` if finding actual progress value is impossible.\n   *\n   */\n  @Prop({ reflect: true }) type: \"indeterminate\" | \"determinate\" = \"determinate\";\n\n  /** When `type` is `\"determinate\"`, the component's progress value with a range of 0.0 - 1.0. */\n  @Prop() value = 0;\n\n  /** Accessible name for the component. */\n  @Prop() label: string;\n\n  /** Text that displays under the component's indicator. */\n  @Prop() text: string;\n\n  /** When `true` and for `\"indeterminate\"` progress bars, reverses the animation direction. */\n  @Prop({ reflect: true }) reversed = false;\n\n  render(): VNode {\n    const isDeterminate = this.type === \"determinate\";\n    const barStyles = isDeterminate ? { width: `${this.value * 100}%` } : {};\n    const dir = getElementDir(this.el);\n    return (\n      <div\n        aria-label={this.label || this.text}\n        aria-valuemax={1}\n        aria-valuemin={0}\n        aria-valuenow={this.value}\n        role=\"progressbar\"\n      >\n        <div class=\"track\">\n          <div\n            class={{\n              bar: true,\n              indeterminate: this.type === \"indeterminate\",\n              [CSS_UTILITY.rtl]: dir === \"rtl\",\n              reversed: this.reversed,\n            }}\n            style={barStyles}\n          />\n        </div>\n        {this.text ? <div class=\"text\">{this.text}</div> : null}\n      </div>\n    );\n  }\n}\n","@import \"../../assets/styles/animation\";\n\n:host {\n  @apply relative block w-full;\n}\n\n.track,\n.bar {\n  @apply absolute top-0;\n  block-size: 2px;\n}\n\n.track {\n  @apply z-default w-full overflow-hidden;\n  background: theme(\"borderColor.color.3\");\n}\n\n.bar {\n  @apply bg-brand z-default;\n}\n\n@media (forced-colors: active) {\n  .track {\n    background-color: highlightText;\n  }\n  .bar {\n    background-color: linkText;\n  }\n}\n\n.indeterminate {\n  @apply w-1/5;\n  animation: looping-progress-bar-ani scale-duration(--calcite-internal-animation-timing-medium, 11) linear infinite;\n  &.calcite--rtl {\n    animation-name: looping-progress-bar-ani-rtl;\n  }\n}\n\n.reversed {\n  animation-direction: reverse;\n}\n\n.text {\n  @apply text-n2h px-0 pt-4 pb-0 text-center font-medium;\n  color: var(--calcite-color-text-2);\n}\n\n@keyframes looping-progress-bar-ani {\n  0% {\n    transform: translate3d(-100%, 0, 0);\n  }\n  50% {\n    inline-size: 40%;\n  }\n  100% {\n    transform: translate3d(600%, 0, 0);\n  }\n}\n\n@keyframes looping-progress-bar-ani-rtl {\n  0% {\n    transform: translate3d(100%, 0, 0);\n  }\n  50% {\n    inline-size: 40%;\n  }\n  100% {\n    transform: translate3d(-600%, 0, 0);\n  }\n}\n\n@include base-component();\n","import { getAssetPath } from \"@stencil/core\";\nimport { getSupportedLocale, LocalizedComponent } from \"./locale\";\nimport { isBrowser } from \"./browser\";\n\nexport type MessageBundle = Record<string, string>;\n\nexport const componentLangToMessageBundleCache: Record<string, Promise<MessageBundle>> = {};\n\nasync function getMessageBundle(lang: string, component: string): Promise<MessageBundle> {\n  const key = `${component}_${lang}`;\n\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n      if (!resp.ok) {\n        throwMessageFetchError();\n      }\n      return resp.json();\n    })\n    .catch(() => throwMessageFetchError());\n\n  return componentLangToMessageBundleCache[key];\n}\n\nfunction throwMessageFetchError(): never {\n  throw new Error(\"could not fetch component message bundle\");\n}\n\nfunction mergeMessages(component: T9nComponent): void {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides,\n  };\n}\n\nfunction noop(): void {\n  // intentionally empty\n}\n\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nexport async function setUpMessages(component: T9nComponent): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\n\nasync function fetchMessages(component: T9nComponent, lang: string): Promise<MessageBundle> {\n  if (!isBrowser()) {\n    return {};\n  }\n\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nexport async function updateMessages(component: T9nComponent, lang: string): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nexport function connectMessages(component: T9nComponent): void {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectMessages(component: T9nComponent): void {\n  // we set this to noop to for watchers triggered when components are disconnected\n  component.onMessagesChange = noop;\n}\n\n/**\n * This interface enables components to support built-in translation strings.\n *\n * **Notes**:\n *\n * This requires `LocalizedComponent` to be implemented.\n * To avoid unnecessary lookups, composite components should set `lang` on internal t9n components.\n */\nexport interface T9nComponent extends LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * This property holds all messages used by the component's rendering.\n   *\n   * This prop should use the `@Prop` decorator. It uses `@Prop` decorator for testing purpose only.\n   */\n  messages: MessageBundle;\n\n  /**\n   * This property holds the component's default messages.\n   */\n  defaultMessages: MessageBundle;\n\n  /**\n   * This property holds all user message overrides.\n   *\n   * This prop should use the `@Prop` decorator.\n   */\n  messageOverrides: Partial<MessageBundle>;\n\n  /**\n   * This private method ensures messages are kept in sync.\n   *\n   * This method should be empty and configured to watch for changes on  `messageOverrides` property.\n   *\n   * @Watch(\"messageOverrides\")\n   * onMessagesChange(): void {\n   *  \\/* wired up by t9n util *\\/\n   * }\n   */\n  onMessagesChange: () => void;\n}\n\nfunction defaultOnMessagesChange(this: T9nComponent): void {\n  mergeMessages(this);\n}\n"],"names":["CSS","Validation","scale","status","id","icon","message","h","class","iconCache","requestCache","scaleToPx","s","m","l","generateIconId","size","name","numberLeadingName","isNaN","Number","charAt","parts","split","length","firstNonDigitInPartPattern","map","part","partIndex","replace","match","offset","toUpperCase","join","normalizeIconName","filled","iconName","substring","fetchIcon","_fetchIcon","props","cachedIconKey","cachedIconData","getCachedIconDataByKey","_context2","fetch","getAssetPath","then","resp","json","catch","console","error","path","Icon","_inherits","this","visible","waitUntilVisible","_this2","loadIconPathData","key","value","intersectionObserver","_this$intersectionObs","disconnect","el","flipRtl","pathData","textLabel","dir","getElementDir","semantic","paths","concat","Host","toAriaBoolean","role","fill","height","viewBox","width","xmlns","d","opacity","isBrowser","_context","fetchIconProps","callback","createObserver","entries","forEach","entry","isIntersecting","_this3","rootMargin","observe","get","HTMLElement","StatusIconDefaults","valid","invalid","idle","InputMessage","requestedIcon","setRequestedIcon","hidden","renderIcon","iconFlipRtl","minMaxStepTypes","patternTypes","minMaxLengthTypes","updateConstraintValidation","inputComponent","input","propName","matchesType","attributeName","toLowerCase","setAttribute","removeAttribute","syncHiddenFormInput","type","hiddenFormInput","isMinMaxStepType","includes","numericInputComponent","isMinMaxLengthType","textualInputComponent","Progress","barStyles","label","text","bar","indeterminate","CSS_UTILITY","reversed","style","componentLangToMessageBundleCache","getMessageBundle","_getMessageBundle","lang","component","ok","throwMessageFetchError","Error","mergeMessages","messages","defaultMessages","messageOverrides","noop","setUpMessages","_setUpMessages","fetchMessages","effectiveLocale","_fetchMessages","_context3","tag","tagName","componentName","getSupportedLocale","updateMessages","_updateMessages","_context4","connectMessages","onMessagesChange","defaultOnMessagesChange","disconnectMessages"],"sourceRoot":""}