{"version":3,"file":"static/js/46895.9ccf6b42.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/utils/key.ts","../node_modules/@esri/calcite-components/dist/components/src/utils/number.ts","../node_modules/@esri/calcite-components/dist/components/src/utils/locale.ts","../node_modules/@esri/calcite-components/dist/components/src/utils/observers.ts"],"sourcesContent":["export function isActivationKey(key: string): boolean {\n  return key === \"Enter\" || key === \" \";\n}\n\nexport const numberKeys = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\nexport const letterKeys = [\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n];\n","import { numberKeys } from \"./key\";\nimport { NumberStringFormat } from \"./locale\";\n\nconst unnecessaryDecimal = new RegExp(`\\\\${\".\"}(0+)?$`);\nconst trailingZeros = new RegExp(\"0+$\");\n\n// adopted from https://stackoverflow.com/a/66939244\nexport class BigDecimal {\n  value: bigint;\n\n  // BigInt(\"-0\").toString() === \"0\" which removes the minus sign when typing numbers like -0.1\n  isNegative: boolean;\n\n  // Configuration: constants\n  static DECIMALS = 100; // number of decimals on all instances\n\n  static ROUNDED = true; // numbers are truncated (false) or rounded (true)\n\n  static SHIFT = BigInt(\"1\" + \"0\".repeat(BigDecimal.DECIMALS)); // derived constant\n\n  constructor(input: string | BigDecimal) {\n    if (input instanceof BigDecimal) {\n      return input;\n    }\n    const [integers, decimals] = expandExponentialNumberString(input).split(\".\").concat(\"\");\n    this.value =\n      BigInt(integers + decimals.padEnd(BigDecimal.DECIMALS, \"0\").slice(0, BigDecimal.DECIMALS)) +\n      BigInt(BigDecimal.ROUNDED && decimals[BigDecimal.DECIMALS] >= \"5\");\n\n    this.isNegative = input.charAt(0) === \"-\";\n  }\n\n  static _divRound = (dividend: bigint, divisor: bigint): BigDecimal =>\n    BigDecimal.fromBigInt(\n      dividend / divisor + (BigDecimal.ROUNDED ? ((dividend * BigInt(2)) / divisor) % BigInt(2) : BigInt(0)),\n    );\n\n  static fromBigInt = (bigint: bigint): BigDecimal =>\n    Object.assign(Object.create(BigDecimal.prototype), { value: bigint, isNegative: bigint < BigInt(0) });\n\n  getIntegersAndDecimals(): { integers: string; decimals: string } {\n    const s = this.value\n      .toString()\n      .replace(\"-\", \"\")\n      .padStart(BigDecimal.DECIMALS + 1, \"0\");\n    const integers = s.slice(0, -BigDecimal.DECIMALS);\n    const decimals = s.slice(-BigDecimal.DECIMALS).replace(trailingZeros, \"\");\n    return { integers, decimals };\n  }\n\n  toString(): string {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    return `${this.isNegative ? \"-\" : \"\"}${integers}${decimals.length ? \".\" + decimals : \"\"}`;\n  }\n\n  formatToParts(formatter: NumberStringFormat): Intl.NumberFormatPart[] {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const parts = formatter.numberFormatter.formatToParts(BigInt(integers));\n    this.isNegative && parts.unshift({ type: \"minusSign\", value: formatter.minusSign });\n\n    if (decimals.length) {\n      parts.push({ type: \"decimal\", value: formatter.decimal });\n      decimals.split(\"\").forEach((char: string) => parts.push({ type: \"fraction\", value: char }));\n    }\n\n    return parts;\n  }\n\n  format(formatter: NumberStringFormat): string {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const integersFormatted = `${this.isNegative ? formatter.minusSign : \"\"}${formatter.numberFormatter.format(\n      BigInt(integers),\n    )}`;\n    const decimalsFormatted = decimals.length\n      ? `${formatter.decimal}${decimals\n          .split(\"\")\n          .map((char: string) => formatter.numberFormatter.format(Number(char)))\n          .join(\"\")}`\n      : \"\";\n    return `${integersFormatted}${decimalsFormatted}`;\n  }\n\n  add(n: string): BigDecimal {\n    return BigDecimal.fromBigInt(this.value + new BigDecimal(n).value);\n  }\n\n  subtract(n: string): BigDecimal {\n    return BigDecimal.fromBigInt(this.value - new BigDecimal(n).value);\n  }\n\n  multiply(n: string): BigDecimal {\n    return BigDecimal._divRound(this.value * new BigDecimal(n).value, BigDecimal.SHIFT);\n  }\n\n  divide(n: string): BigDecimal {\n    return BigDecimal._divRound(this.value * BigDecimal.SHIFT, new BigDecimal(n).value);\n  }\n}\n\nexport function isValidNumber(numberString: string): boolean {\n  return !(!numberString || isNaN(Number(numberString)));\n}\n\nexport function parseNumberString(numberString?: string): string {\n  if (!numberString || !stringContainsNumbers(numberString)) {\n    return \"\";\n  }\n\n  return sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string => {\n    let containsDecimal = false;\n    const result = nonExpoNumString\n      .split(\"\")\n      .filter((value, i) => {\n        if (value.match(/\\./g) && !containsDecimal) {\n          containsDecimal = true;\n          return true;\n        }\n        if (value.match(/-/g) && i === 0) {\n          return true;\n        }\n        return numberKeys.includes(value);\n      })\n      .join(\"\");\n    return isValidNumber(result) ? new BigDecimal(result).toString() : \"\";\n  });\n}\n\n// regex for number sanitization\nconst allLeadingZerosOptionallyNegative = /^([-0])0+(?=\\d)/;\nconst decimalOnlyAtEndOfString = /(?!^\\.)\\.$/;\nconst allHyphensExceptTheStart = /(?!^-)-/g;\nconst isNegativeDecimalOnlyZeros = /^-\\b0\\b\\.?0*$/;\nconst hasTrailingDecimalZeros = /0*$/;\n\nexport const sanitizeNumberString = (numberString: string): string =>\n  sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n    const sanitizedValue = nonExpoNumString\n      .replace(allHyphensExceptTheStart, \"\")\n      .replace(decimalOnlyAtEndOfString, \"\")\n      .replace(allLeadingZerosOptionallyNegative, \"$1\");\n    return isValidNumber(sanitizedValue)\n      ? isNegativeDecimalOnlyZeros.test(sanitizedValue)\n        ? sanitizedValue\n        : getBigDecimalAsString(sanitizedValue)\n      : nonExpoNumString;\n  });\n\nexport function getBigDecimalAsString(sanitizedValue: string): string {\n  const sanitizedValueDecimals = sanitizedValue.split(\".\")[1];\n  const value = new BigDecimal(sanitizedValue).toString();\n  const [bigDecimalValueInteger, bigDecimalValueDecimals] = value.split(\".\");\n\n  return sanitizedValueDecimals && bigDecimalValueDecimals !== sanitizedValueDecimals\n    ? `${bigDecimalValueInteger}.${sanitizedValueDecimals}`\n    : value;\n}\n\nexport function sanitizeExponentialNumberString(numberString: string, func: (s: string) => string): string {\n  if (!numberString) {\n    return numberString;\n  }\n\n  const firstE = numberString.toLowerCase().indexOf(\"e\") + 1;\n\n  if (!firstE) {\n    return func(numberString);\n  }\n\n  return numberString\n    .replace(/[eE]*$/g, \"\")\n    .substring(0, firstE)\n    .concat(numberString.slice(firstE).replace(/[eE]/g, \"\"))\n    .split(/[eE]/)\n    .map((section, i) => (i === 1 ? func(section.replace(/\\./g, \"\")) : func(section)))\n    .join(\"e\")\n    .replace(/^e/, \"1e\");\n}\n\n/**\n * Converts an exponential notation numberString into decimal notation.\n * BigInt doesn't support exponential notation, so this is required to maintain precision\n *\n * @param {string} numberString - pre-validated exponential or decimal number\n * @returns {string} numberString in decimal notation\n */\nexport function expandExponentialNumberString(numberString: string): string {\n  const exponentialParts = numberString.split(/[eE]/);\n  if (exponentialParts.length === 1) {\n    return numberString;\n  }\n\n  const number = +numberString;\n  if (Number.isSafeInteger(number)) {\n    return `${number}`;\n  }\n\n  const isNegative = numberString.charAt(0) === \"-\";\n  const magnitude = +exponentialParts[1];\n  const decimalParts = exponentialParts[0].split(\".\");\n  const integers = (isNegative ? decimalParts[0].substring(1) : decimalParts[0]) || \"\";\n  const decimals = decimalParts[1] || \"\";\n\n  const shiftDecimalLeft = (integers: string, magnitude: number): string => {\n    const magnitudeDelta = Math.abs(magnitude) - integers.length;\n    const leftPaddedZeros = magnitudeDelta > 0 ? `${\"0\".repeat(magnitudeDelta)}${integers}` : integers;\n    const shiftedDecimal = `${leftPaddedZeros.slice(0, magnitude)}${\".\"}${leftPaddedZeros.slice(magnitude)}`;\n    return shiftedDecimal;\n  };\n\n  const shiftDecimalRight = (decimals: string, magnitude: number): string => {\n    const rightPaddedZeros =\n      magnitude > decimals.length ? `${decimals}${\"0\".repeat(magnitude - decimals.length)}` : decimals;\n    const shiftedDecimal = `${rightPaddedZeros.slice(0, magnitude)}${\".\"}${rightPaddedZeros.slice(magnitude)}`;\n    return shiftedDecimal;\n  };\n\n  const expandedNumberString =\n    magnitude > 0\n      ? `${integers}${shiftDecimalRight(decimals, magnitude)}`\n      : `${shiftDecimalLeft(integers, magnitude)}${decimals}`;\n\n  return `${isNegative ? \"-\" : \"\"}${expandedNumberString.charAt(0) === \".\" ? \"0\" : \"\"}${expandedNumberString\n    .replace(unnecessaryDecimal, \"\")\n    .replace(allLeadingZerosOptionallyNegative, \"\")}`;\n}\n\nfunction stringContainsNumbers(string: string): boolean {\n  return numberKeys.some((number) => string.includes(number));\n}\n\n/**\n * Adds localized trailing decimals zero values to the number string.\n * BigInt conversion to string removes the trailing decimal zero values (Ex: 1.000 is returned as 1). This method helps adding them back.\n *\n * @param {string} localizedValue - localized number string value\n * @param {string} value - current value in the input field\n * @param {NumberStringFormat} formatter - numberStringFormatter instance to localize the number value\n * @returns {string} localized number string value\n */\nexport function addLocalizedTrailingDecimalZeros(\n  localizedValue: string,\n  value: string,\n  formatter: NumberStringFormat,\n): string {\n  const decimals = value.split(\".\")[1];\n  if (decimals) {\n    const trailingDecimalZeros = decimals.match(hasTrailingDecimalZeros)[0];\n    if (\n      trailingDecimalZeros &&\n      formatter.delocalize(localizedValue).length !== value.length &&\n      decimals.indexOf(\"e\") === -1\n    ) {\n      const decimalSeparator = formatter.decimal;\n      localizedValue = !localizedValue.includes(decimalSeparator)\n        ? `${localizedValue}${decimalSeparator}`\n        : localizedValue;\n      return localizedValue.padEnd(localizedValue.length + trailingDecimalZeros.length, formatter.localize(\"0\"));\n    }\n  }\n  return localizedValue;\n}\n","import { closestElementCrossShadowBoundary, containsCrossShadowBoundary } from \"./dom\";\nimport { BigDecimal, isValidNumber, sanitizeExponentialNumberString } from \"./number\";\nimport { createObserver } from \"./observers\";\n\nexport const defaultLocale = \"en\";\n\nexport const t9nLocales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"el\",\n  defaultLocale,\n  \"es\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"he\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt-BR\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\",\n];\n\nexport const locales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"de-AT\",\n  \"de-CH\",\n  \"el\",\n  defaultLocale,\n  \"en-AU\",\n  \"en-CA\",\n  \"en-GB\",\n  \"es\",\n  \"es-MX\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"fr-CH\",\n  \"he\",\n  \"hi\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"it-CH\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"mk\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\",\n];\n\nexport const numberingSystems = [\"arab\", \"arabext\", \"latn\"] as const;\n\nexport const supportedLocales = [...new Set([...t9nLocales, ...locales])] as const;\n\nexport type NumberingSystem = (typeof numberingSystems)[number];\n\nexport type SupportedLocale = (typeof supportedLocales)[number];\n\nconst isNumberingSystemSupported = (numberingSystem: string): numberingSystem is NumberingSystem =>\n  numberingSystems.includes(numberingSystem as NumberingSystem);\n\nconst browserNumberingSystem = new Intl.NumberFormat().resolvedOptions().numberingSystem;\n\n// for consistent browser behavior, we normalize numberingSystem to prevent the browser-inferred value\n// see https://github.com/Esri/calcite-design-system/issues/3079#issuecomment-1168964195 for more info\nexport const defaultNumberingSystem =\n  browserNumberingSystem === \"arab\" || !isNumberingSystemSupported(browserNumberingSystem)\n    ? \"latn\"\n    : browserNumberingSystem;\n\nexport const getSupportedNumberingSystem = (numberingSystem: string): NumberingSystem =>\n  isNumberingSystemSupported(numberingSystem) ? numberingSystem : defaultNumberingSystem;\n\n/**\n * Gets the locale that best matches the context.\n *\n * @param locale – the BCP 47 locale code\n * @param context - specifies whether the locale code should match in the context of CLDR or T9N (translation)\n */\nexport function getSupportedLocale(locale: string, context: \"cldr\" | \"t9n\" = \"cldr\"): SupportedLocale {\n  const contextualLocales = context === \"cldr\" ? locales : t9nLocales;\n\n  if (!locale) {\n    return defaultLocale;\n  }\n\n  if (contextualLocales.includes(locale)) {\n    return locale;\n  }\n\n  locale = locale.toLowerCase();\n\n  // we support both 'nb' and 'no' (BCP 47) for Norwegian but only `no` has corresponding bundle\n  if (locale === \"nb\") {\n    return \"no\";\n  }\n\n  // we use `pt-BR` as it will have the same translations as `pt`, which has no corresponding bundle\n  if (context === \"t9n\" && locale === \"pt\") {\n    return \"pt-BR\";\n  }\n\n  if (locale.includes(\"-\")) {\n    locale = locale.replace(/(\\w+)-(\\w+)/, (_match, language, region) => `${language}-${region.toUpperCase()}`);\n\n    if (!contextualLocales.includes(locale)) {\n      locale = locale.split(\"-\")[0];\n    }\n  }\n\n  // we can `zh-CN` as base translation for chinese locales which has no corresponding bundle.\n  if (locale === \"zh\") {\n    return \"zh-CN\";\n  }\n\n  if (!contextualLocales.includes(locale)) {\n    console.warn(\n      `Translations for the \"${locale}\" locale are not available and will fall back to the default, English (en).`,\n    );\n    return defaultLocale;\n  }\n\n  return locale;\n}\n\n/**\n * Gets the locale that best matches the context for date formatting.\n *\n * Intl date formatting has some quirks with certain locales. This handles those quirks by mapping a locale to another for date formatting.\n *\n * See https://github.com/Esri/calcite-design-system/issues/9387\n *\n * @param locale – the BCP 47 locale code\n * @returns {string} a BCP 47 locale code\n */\nexport function getDateFormatSupportedLocale(locale: string): string {\n  switch (locale) {\n    case \"it-CH\":\n      return \"de-CH\";\n    case \"bs\":\n      return \"bs-Cyrl\";\n    default:\n      return locale;\n  }\n}\n\n/**\n * This interface is for components that need to determine locale from the lang attribute.\n */\nexport interface LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * Used to store the effective locale to avoid multiple lookups.\n   *\n   * This is an internal property and should:\n   *\n   * - use the `@State` decorator\n   * - be initialized to \"\"\n   *\n   * Components should watch this prop to ensure messages are updated.\n   *\n   * @Watch(\"effectiveLocale\")\n   * effectiveLocaleChange(): void {\n   *   updateMessages(this, this.effectiveLocale);\n   * }\n   */\n  effectiveLocale: string;\n}\n\nconst connectedComponents = new Set<LocalizedComponent>();\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback` before any logic that depends on locale\n *\n * @param component\n */\nexport function connectLocalized(component: LocalizedComponent): void {\n  updateEffectiveLocale(component);\n\n  if (connectedComponents.size === 0) {\n    mutationObserver?.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"lang\"],\n      subtree: true,\n    });\n  }\n\n  connectedComponents.add(component);\n}\n\n/**\n * This is only exported for components that implemented the now deprecated `locale` prop.\n *\n * Do not use this utils for new components.\n *\n * @param component\n */\nexport function updateEffectiveLocale(component: LocalizedComponent): void {\n  component.effectiveLocale = getLocale(component);\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectLocalized(component: LocalizedComponent): void {\n  connectedComponents.delete(component);\n\n  if (connectedComponents.size === 0) {\n    mutationObserver.disconnect();\n  }\n}\n\nconst mutationObserver = createObserver(\"mutation\", (records) => {\n  records.forEach((record) => {\n    const el = record.target as HTMLElement;\n\n    connectedComponents.forEach((component) => {\n      const inUnrelatedSubtree = !containsCrossShadowBoundary(el, component.el);\n\n      if (inUnrelatedSubtree) {\n        return;\n      }\n\n      const closestLangEl = closestElementCrossShadowBoundary<HTMLElement>(component.el, \"[lang]\");\n\n      if (!closestLangEl) {\n        component.effectiveLocale = defaultLocale;\n        return;\n      }\n\n      const closestLang = closestLangEl.lang;\n\n      component.effectiveLocale =\n        // user set lang=\"\" means unknown language, so we use default\n        closestLangEl.hasAttribute(\"lang\") && closestLang === \"\" ? defaultLocale : closestLang;\n    });\n  });\n});\n\n/**\n * This util helps resolve a component's locale.\n * It will also fall back on the deprecated `locale` if a component implemented this previously.\n *\n * @param component\n */\nfunction getLocale(component: LocalizedComponent): string {\n  return (\n    component.el.lang ||\n    closestElementCrossShadowBoundary<HTMLElement>(component.el, \"[lang]\")?.lang ||\n    document.documentElement.lang ||\n    defaultLocale\n  );\n}\n\nexport interface NumberStringFormatOptions extends Intl.NumberFormatOptions {\n  numberingSystem: NumberingSystem;\n  locale: string;\n}\n\n/**\n * This util formats and parses numbers for localization\n */\nexport class NumberStringFormat {\n  /**\n   * The actual group separator for the specified locale.\n   * White-space group separators are changed to the non-breaking space (nbsp) unicode character.\n   * so we replace them with a normal <SPACE>.\n   */\n  private _actualGroup: string;\n\n  /** the corrected group separator */\n  private _group: string;\n\n  get group(): string {\n    return this._group;\n  }\n\n  private _decimal: string;\n\n  get decimal(): string {\n    return this._decimal;\n  }\n\n  private _minusSign: string;\n\n  get minusSign(): string {\n    return this._minusSign;\n  }\n\n  private _digits: Array<string>;\n\n  get digits(): Array<string> {\n    return this._digits;\n  }\n\n  private _getDigitIndex;\n\n  private _numberFormatter: Intl.NumberFormat;\n\n  get numberFormatter(): Intl.NumberFormat {\n    return this._numberFormatter;\n  }\n\n  private _numberFormatOptions: NumberStringFormatOptions;\n\n  get numberFormatOptions(): NumberStringFormatOptions {\n    return this._numberFormatOptions;\n  }\n\n  /**\n   * numberFormatOptions needs to be set before localize/delocalize is called to ensure the options are up to date\n   */\n  set numberFormatOptions(options: NumberStringFormatOptions) {\n    options.locale = getSupportedLocale(options?.locale);\n    options.numberingSystem = getSupportedNumberingSystem(options?.numberingSystem);\n\n    if (\n      // No need to create the formatter if `locale` and `numberingSystem`\n      // are the default values and `numberFormatOptions` has not been set\n      (!this._numberFormatOptions &&\n        options.locale === defaultLocale &&\n        options.numberingSystem === defaultNumberingSystem &&\n        // don't skip initialization if any options besides locale/numberingSystem are set\n        Object.keys(options).length === 2) ||\n      // cache formatter by only recreating when options change\n      JSON.stringify(this._numberFormatOptions) === JSON.stringify(options)\n    ) {\n      return;\n    }\n\n    this._numberFormatOptions = options;\n\n    this._numberFormatter = new Intl.NumberFormat(\n      this._numberFormatOptions.locale,\n      this._numberFormatOptions as Intl.NumberFormatOptions,\n    );\n\n    this._digits = [\n      ...new Intl.NumberFormat(this._numberFormatOptions.locale, {\n        useGrouping: false,\n        numberingSystem: this._numberFormatOptions.numberingSystem,\n      } as Intl.NumberFormatOptions).format(9876543210),\n    ].reverse();\n\n    const index = new Map(this._digits.map((d, i) => [d, i]));\n\n    // numberingSystem is parsed to return consistent decimal separator across browsers.\n    const parts = new Intl.NumberFormat(this._numberFormatOptions.locale, {\n      numberingSystem: this._numberFormatOptions.numberingSystem,\n    } as Intl.NumberFormatOptions).formatToParts(-12345678.9);\n\n    this._actualGroup = parts.find((d) => d.type === \"group\").value;\n    // change whitespace group separators to the unicode non-breaking space (nbsp)\n    this._group = this._actualGroup.trim().length === 0 || this._actualGroup == \" \" ? \"\\u00A0\" : this._actualGroup;\n    this._decimal = parts.find((d) => d.type === \"decimal\").value;\n    this._minusSign = parts.find((d) => d.type === \"minusSign\").value;\n    this._getDigitIndex = (d: string) => index.get(d);\n  }\n\n  delocalize = (numberString: string): string =>\n    // For performance, (de)localization is skipped if the formatter isn't initialized.\n    // In order to localize/delocalize, e.g. when lang/numberingSystem props are not default values,\n    // `numberFormatOptions` must be set in a component to create and cache the formatter.\n    this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string =>\n          nonExpoNumString\n            .replace(new RegExp(`[${this._minusSign}]`, \"g\"), \"-\")\n            .replace(new RegExp(`[${this._group}]`, \"g\"), \"\")\n            .replace(new RegExp(`[${this._decimal}]`, \"g\"), \".\")\n            .replace(new RegExp(`[${this._digits.join(\"\")}]`, \"g\"), this._getDigitIndex),\n        )\n      : numberString;\n\n  localize = (numberString: string): string =>\n    this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string =>\n          isValidNumber(nonExpoNumString.trim())\n            ? new BigDecimal(nonExpoNumString.trim())\n                .format(this)\n                .replace(new RegExp(`[${this._actualGroup}]`, \"g\"), this._group)\n            : nonExpoNumString,\n        )\n      : numberString;\n}\n\nexport const numberStringFormatter = new NumberStringFormat();\n\nexport type LocaleDateTimeOptionKey = string;\n\n/**\n * Exported for testing purposes only.\n *\n * @internal\n */\nexport let dateTimeFormatCache: Map<LocaleDateTimeOptionKey, Intl.DateTimeFormat>;\n\n/**\n * Used to ensure all cached formats are for the same locale.\n *\n * @internal\n */\nlet previousLocaleUsedForCaching: string;\n\n/**\n * Generates a cache key for date time format lookups.\n *\n * @internal\n */\nfunction buildDateTimeFormatCacheKey(options: Intl.DateTimeFormatOptions = {}): string {\n  return Object.entries(options)\n    .sort(([key1], [key2]) => key1.localeCompare(key2))\n    .map((keyValue) => `${keyValue[0]}-${keyValue[1]}`)\n    .flat()\n    .join(\":\");\n}\n\n/**\n * Returns an instance of Intl.DateTimeFormat and reuses it if requested with the same locale and options.\n *\n * **Note**: the cache will be cleared if a different locale is provided\n *\n * @internal\n */\nexport function getDateTimeFormat(locale: string, options?: Intl.DateTimeFormatOptions): Intl.DateTimeFormat {\n  locale = getSupportedLocale(locale);\n\n  if (!dateTimeFormatCache) {\n    dateTimeFormatCache = new Map();\n  }\n\n  if (previousLocaleUsedForCaching !== locale) {\n    dateTimeFormatCache.clear();\n    previousLocaleUsedForCaching = locale;\n  }\n\n  const key = buildDateTimeFormatCacheKey(options);\n  const cached = dateTimeFormatCache.get(key);\n\n  if (cached) {\n    return cached;\n  }\n\n  const format = new Intl.DateTimeFormat(locale, options);\n  dateTimeFormatCache.set(key, format);\n\n  return format;\n}\n","import { isBrowser } from \"./browser\";\n\nexport interface ExtendedMutationObserver extends MutationObserver {\n  new: () => ExtendedMutationObserver;\n  unobserve: (target: Node) => void;\n}\n\ndeclare const ExtendedMutationObserver: {\n  prototype: ExtendedMutationObserver;\n  new (callback: MutationCallback): ExtendedMutationObserver;\n};\n\ntype ObserverType = \"mutation\" | \"intersection\" | \"resize\";\n\ntype ObserverCallbackType<T extends ObserverType> = T extends \"mutation\"\n  ? MutationCallback\n  : T extends \"intersection\"\n    ? IntersectionObserverCallback\n    : T extends \"resize\"\n      ? ResizeObserverCallback\n      : never;\n\ntype ObserverOptions<T extends ObserverType> = T extends \"intersection\" ? IntersectionObserverInit : never;\n\ntype ObserverClassType<T extends ObserverType> = T extends \"mutation\"\n  ? typeof ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? typeof IntersectionObserver\n    : T extends \"resize\"\n      ? typeof ResizeObserver\n      : never;\n\ntype ObserverInstanceType<T extends ObserverType> = T extends \"mutation\"\n  ? ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? IntersectionObserver\n    : T extends \"resize\"\n      ? ResizeObserver\n      : never;\n\n/**\n * This utility ensures observers are created only for browser contexts.\n *\n * @param type - the type of observer to create\n * @param callback - the observer callback\n * @param options - the observer options\n */\nexport function createObserver<T extends ObserverType>(\n  type: T,\n  callback: ObserverCallbackType<T>,\n  options?: ObserverOptions<T>,\n): ObserverInstanceType<T> | undefined {\n  if (!isBrowser()) {\n    return undefined;\n  }\n\n  const Observer = getObserver<T>(type);\n  return new Observer(callback as any, options) as any;\n}\n\nfunction getObserver<T extends ObserverType>(type: T): ObserverClassType<T> {\n  // based on https://github.com/whatwg/dom/issues/126#issuecomment-1049814948\n  class ExtendedMutationObserver extends window.MutationObserver implements ExtendedMutationObserver {\n    private observedEntry: Array<{\n      target: Node;\n      options?: MutationObserverInit;\n    }> = [];\n\n    private readonly callback: MutationCallback;\n\n    constructor(callback: MutationCallback) {\n      super(callback);\n      this.callback = callback;\n    }\n\n    observe(target: Node, options?: MutationObserverInit): void {\n      this.observedEntry.push({ target, options });\n\n      return super.observe(target, options);\n    }\n\n    unobserve(target: Node): void {\n      const newObservedEntries = this.observedEntry.filter((observed) => observed.target !== target);\n      this.observedEntry = [];\n      this.callback(super.takeRecords(), this);\n      this.disconnect();\n      newObservedEntries.forEach((observed) => this.observe(observed.target, observed.options));\n    }\n  }\n\n  return (function () {\n    return (\n      type === \"intersection\"\n        ? window.IntersectionObserver\n        : type === \"mutation\"\n          ? ExtendedMutationObserver\n          : window.ResizeObserver\n    ) as any;\n  })();\n}\n"],"names":["isActivationKey","key","numberKeys","unnecessaryDecimal","RegExp","trailingZeros","BigDecimal","input","_classCallCheck","numberString","exponentialParts","split","length","number","Number","isSafeInteger","isNegative","charAt","magnitude","decimalParts","integers","substring","decimals","shiftDecimalLeft","magnitudeDelta","Math","abs","leftPaddedZeros","repeat","slice","shiftDecimalRight","rightPaddedZeros","expandedNumberString","replace","allLeadingZerosOptionallyNegative","expandExponentialNumberString","concat","_expandExponentialNum2","this","value","BigInt","padEnd","DECIMALS","ROUNDED","_createClass","s","toString","padStart","getIntegersAndDecimals","formatter","parts","numberFormatter","formatToParts","unshift","type","minusSign","push","decimal","forEach","char","integersFormatted","format","decimalsFormatted","map","join","n","fromBigInt","_divRound","SHIFT","isValidNumber","isNaN","parseNumberString","string","includes","sanitizeExponentialNumberString","nonExpoNumString","containsDecimal","result","filter","i","match","dividend","divisor","bigint","Object","assign","create","prototype","decimalOnlyAtEndOfString","allHyphensExceptTheStart","isNegativeDecimalOnlyZeros","hasTrailingDecimalZeros","sanitizeNumberString","sanitizedValue","test","sanitizedValueDecimals","_value$split2","bigDecimalValueInteger","bigDecimalValueDecimals","getBigDecimalAsString","func","firstE","toLowerCase","indexOf","section","addLocalizedTrailingDecimalZeros","localizedValue","trailingDecimalZeros","delocalize","decimalSeparator","localize","defaultLocale","t9nLocales","locales","numberingSystems","isNumberingSystemSupported","numberingSystem","browserNumberingSystem","Intl","NumberFormat","resolvedOptions","defaultNumberingSystem","getSupportedNumberingSystem","getSupportedLocale","locale","context","contextualLocales","_match","language","region","toUpperCase","console","warn","getDateFormatSupportedLocale","connectedComponents","Set","connectLocalized","component","effectiveLocale","el","lang","closestElementCrossShadowBoundary","_closestElementCrossS","document","documentElement","getLocale","updateEffectiveLocale","size","mutationObserver","observe","attributes","attributeFilter","subtree","add","disconnectLocalized","delete","disconnect","createObserver","records","record","target","containsCrossShadowBoundary","closestLangEl","closestLang","hasAttribute","dateTimeFormatCache","previousLocaleUsedForCaching","numberStringFormatter","_this","_numberFormatOptions","_minusSign","_group","_decimal","_digits","_getDigitIndex","trim","_actualGroup","get","_numberFormatter","options","keys","JSON","stringify","_toConsumableArray","useGrouping","reverse","index","Map","d","find","getDateTimeFormat","clear","entries","sort","key1","key2","localeCompare","keyValue","flat","buildDateTimeFormatCacheKey","cached","DateTimeFormat","set","callback","isBrowser","Observer","ExtendedMutationObserver","_inherits","observedEntry","newObservedEntries","observed","_this2","window","MutationObserver","IntersectionObserver","ResizeObserver","getObserver"],"sourceRoot":""}